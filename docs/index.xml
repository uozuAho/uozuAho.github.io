<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>I am Woz</title>
    <link>https://iamwoz.com/</link>
    <description>Mostly programming-related stuff</description>
    <atom:icon>https://iamwoz.com/favicon.ico</atom:icon>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Sun, 05 Nov 2023 15:42:51 +1100</lastBuildDate><atom:link href="https://iamwoz.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Why Is C Faster Than C#?</title>
      <link>https://iamwoz.com/blog/20231105_why_is_c_faster_than_csharp/</link>
      <pubDate>Sun, 05 Nov 2023 15:42:51 +1100</pubDate>
      
      <guid>https://iamwoz.com/blog/20231105_why_is_c_faster_than_csharp/</guid>
      <description>&lt;h1 id=&#34;contents&#34;&gt;Contents&lt;/h1&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#contents&#34;&gt;Contents&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#this-blog-post-in-a-paragraph&#34;&gt;This blog post in a paragraph&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-long-story&#34;&gt;The long story&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#running-the-speed-comparison-poking-around&#34;&gt;Running the speed comparison, poking around&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#digging-into-the-machine-code&#34;&gt;Digging into the machine code&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#c&#34;&gt;C&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#c-1&#34;&gt;C#&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#what-does-it-all-mean&#34;&gt;What does it all mean?&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#vectorization&#34;&gt;Vectorization&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-end&#34;&gt;The end&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#assembly&#34;&gt;Appendix A: assembly&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#readings&#34;&gt;Appendix B: Interesting reading&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h1 id=&#34;this-blog-post-in-a-paragraph&#34;&gt;This blog post in a paragraph&lt;/h1&gt;
&lt;p&gt;Why is &lt;a href=&#34;https://github.com/niklas-heer/speed-comparison/blob/master/src/leibniz.c&#34;&gt;this C code&lt;/a&gt;
5x faster than &lt;a href=&#34;https://github.com/niklas-heer/speed-comparison/blob/master/src/cs/Program.cs&#34;&gt;this equivalent C# code&lt;/a&gt;?
On my machine, the C program completes in 32ms versus 150ms for the C# program.
30ms of the difference is due to C# start-up/shutdown overhead. The other 90ms
is due to &lt;code&gt;gcc&lt;/code&gt; vectorizing the loop, after being allowed to ignore some
standards around floating-point calculations. This is a very specific case of
numerically-intensive code: it&amp;rsquo;s not guaranteed that C will always be 5x faster
than C#!&lt;/p&gt;
&lt;h1 id=&#34;the-long-story&#34;&gt;The long story&lt;/h1&gt;
&lt;p&gt;After &lt;a href=&#34;https://iamwoz.com/blog/20230330_making_csharp_go_fast/&#34;&gt;making C# go fast&lt;/a&gt;,
I wondered if I could do much better using a non-managed language like C.
Rewriting my game in C is a large project, so I went hunting for smaller
examples. Before long, I came across &lt;a href=&#34;https://niklas-heer.github.io/speed-comparison/&#34;&gt;speed comparison&lt;/a&gt;,
which compares many languages performing the same small calculation of pi. It&amp;rsquo;s
a trivially small piece of code which only compares a tiny portion of what each
language is capable of, but it&amp;rsquo;s a good starting point for a learning exercise.&lt;/p&gt;
&lt;p&gt;C comes in at 3 times faster than C# in the above comparison. In this blog post,
I&amp;rsquo;ll investigate why, as someone with a rather patchy understanding of low level
code and performance (me).&lt;/p&gt;
&lt;p&gt;The questions of which language is the fastest, and whether managed languages
like C# are slow have been around forever, and many people smarter than me have
written about it online. See &lt;a href=&#34;#readings&#34;&gt;appendix B&lt;/a&gt; for some
interesting reads. The generic reasons given are VM/runtime overhead, garbage
collection (GC), just-in-time compilation (JIT), array bounds checking and more.
I wasn&amp;rsquo;t satisfied with generic reasons, and wanted to know specifically why two
pieces of comparable code differed.&lt;/p&gt;
&lt;h1 id=&#34;running-the-speed-comparison-poking-around&#34;&gt;Running the speed comparison, poking around&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/niklas-heer/speed-comparison&#34;&gt;Speed comparison&lt;/a&gt; is relatively
straightforward to run on a Linux-like environment. On my machine, C performed
even better than reported, averaging 35ms per run, versus 155ms for C#.&lt;/p&gt;
&lt;p&gt;The code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reads a number &lt;code&gt;rounds&lt;/code&gt; from a file&lt;/li&gt;
&lt;li&gt;iteratively calculates the value of pi, looping as many times as &lt;code&gt;rounds&lt;/code&gt;
specifies&lt;/li&gt;
&lt;li&gt;prints the value of pi&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I tinkered with the code a bit to get an understanding of where the time was
being spent. Eliminating file I/O by hard coding &lt;code&gt;rounds&lt;/code&gt; saved a few
milliseconds in both C and C#. Setting &lt;code&gt;rounds&lt;/code&gt; to 1 reduced C&amp;rsquo;s run time to
effectively zero, while C# still took 30ms. I assume this time is
start-up/shutdown time of the C# runtime (CLR), which I don&amp;rsquo;t particularly care
about.&lt;/p&gt;
&lt;p&gt;Out of curiosity, I quickly checked out ahead-of-time compilation
&lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/core/deploying/native-aot/?tabs=net7%2Cwindows&#34;&gt;(AOT)&lt;/a&gt;
for C#. It only had a small impact on overall run time, and start-up time was
still around 20ms. I didn&amp;rsquo;t investigate any further.&lt;/p&gt;
&lt;p&gt;So: ignoring file I/O and start-up time, C completes the pi calculation in 30ms,
while C# takes 120ms. The code for the calculation is almost identical:&lt;/p&gt;
&lt;p&gt;C:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2u&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; rounds; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pi &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2u&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1u&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;C#:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; i &amp;lt; rounds + &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x *= -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pi += (x / (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; * i - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Changing the signed-ness of variables and the time at which to increment &lt;code&gt;i&lt;/code&gt;
made no difference. The line &lt;code&gt;double x = -1.0 + 2.0 * (i &amp;amp; 0x1);&lt;/code&gt; produces the
same value of &lt;code&gt;x&lt;/code&gt; as &lt;code&gt;x *= -1&lt;/code&gt;, but is important for reasons I&amp;rsquo;ll talk about
later. First, let&amp;rsquo;s take a look at the machine code that is generated by C and
C#.&lt;/p&gt;
&lt;h1 id=&#34;digging-into-the-machine-code&#34;&gt;Digging into the machine code&lt;/h1&gt;
&lt;h2 id=&#34;c&#34;&gt;C&lt;/h2&gt;
&lt;p&gt;To see C disassembly, I used a tool called &lt;a href=&#34;https://en.wikipedia.org/wiki/Objdump&#34;&gt;objdump&lt;/a&gt;.
I bypassed Earthly and ran &lt;code&gt;gcc&lt;/code&gt; and &lt;code&gt;objdump&lt;/code&gt; directly.
The &lt;a href=&#34;https://github.com/niklas-heer/speed-comparison/blob/fbe72677a25df85e1bcc6386c6069dd163f04962/Earthfile#L116&#34;&gt;C compilation command in the Earthfile&lt;/a&gt;
is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcc leibniz.c -o leibniz -O3 -s -static -flto -march&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;native &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -mtune&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;native -fomit-frame-pointer -fno-signed-zeros &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -fno-trapping-math -fassociative-math
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I modified this slightly to make the objdump output easier to understand:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;removed &lt;code&gt;-s&lt;/code&gt; to keep symbol information&lt;/li&gt;
&lt;li&gt;removed &lt;code&gt;-static&lt;/code&gt;, so that external library code was excluded from the executable&lt;/li&gt;
&lt;li&gt;added &lt;code&gt;-g&lt;/code&gt; to add debugging information&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This didn&amp;rsquo;t affect the speed of the program.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# compile the program&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcc leibniz.c -o leibniz -O3 -g -flto -march&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;native &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -mtune&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;native -fomit-frame-pointer -fno-signed-zeros &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -fno-trapping-math -fassociative-math
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# extract the machine code in intel assembly format,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# along with other useful details to help understand&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# which part of the code the assembly is for&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;objdump -drwlCS -Mintel leibniz &amp;gt; leibniz.asm
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;ve put all the assembly together in an &lt;a href=&#34;#assembly&#34;&gt;appendix&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll cover the &lt;code&gt;gcc&lt;/code&gt; options in more detail later. The &lt;code&gt;objdump&lt;/code&gt; options are
described here: &lt;a href=&#34;https://www.man7.org/linux/man-pages/man1/objdump.1.html&#34;&gt;objdump man page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;c-1&#34;&gt;C#&lt;/h2&gt;
&lt;p&gt;Accessing C# disassembly has a much more &amp;lsquo;Windows-y&amp;rsquo; feel to it. The most common
advice is to use Visual Studio, pause the program at a breakpoint, then access
the disassembly via a menu: Debug menu -&amp;gt; Windows -&amp;gt; Disassembly. To make sure
you&amp;rsquo;re looking at optimised code, before running the debugger, you need to
disable &amp;lsquo;Suppress JIT optimization on module load&amp;rsquo; and &amp;lsquo;Enable Just My Code&amp;rsquo;
within the menus Tools -&amp;gt; Options -&amp;gt; Debugging -&amp;gt; General.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&#34;https://iamwoz.com/blog/20231105_why_is_c_faster_than_c/vs_disassembly.png&#34;
  alt=&#34;A screenshot of Visual Studio, showing the disassembly menu item being selected&#34;
  width=&#34;933&#34;
  loading=&#34;lazy&#34; /&gt;
  &lt;figcaption&gt;How to show native disassembly of your C# program&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This process makes sense, as .NET executables are distributed in .NET&amp;rsquo;s
intermediate language format (IL), and IL is only compiled to native code by the
JIT as needed. &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;However&lt;/strong&gt;, the assembly shown by Visual Studio was suspiciously long compared
to the C program&amp;rsquo;s assembly. With certain compilation settings (more on this
later), the C program completed in a similar time to the C# program, yet the C
assembly code was less than half as long as the C# disassembly. It didn&amp;rsquo;t make
sense that they could run at the same speed.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/a/38159398/2670469&#34;&gt;This stack overflow answer&lt;/a&gt; says
that the JIT behaves differently when run under the debugger. I had a feeling
that this was the case even with the Visual Studio option set to allow JIT
optimization. I tried using &lt;code&gt;vsjitdebugger&lt;/code&gt;, spending hours manually stepping
through all the C# runtime start-up until eventually reaching my code, only to
find that it was still the same long set of instructions. If you ever find
yourself needing to use &lt;code&gt;vsjitdebugger&lt;/code&gt;, I found that I could only get it to
work by running Visual Studio as admin, then running &lt;code&gt;vsjitdebugger&lt;/code&gt; from the
Powershell terminal within Visual Studio.&lt;/p&gt;
&lt;p&gt;Eventually, I came across this &lt;a href=&#34;https://mijailovic.net/2018/07/05/generated-code/&#34;&gt;post about viewing code generated by the JIT&lt;/a&gt;.
It outlines a number of ways to view the disassembly, one being to use &lt;a href=&#34;https://benchmarkdotnet.org/&#34;&gt;BenchmarkDotNet&lt;/a&gt;
with &lt;a href=&#34;https://benchmarkdotnet.org/articles/features/disassembler.html&#34;&gt;DisassemblyDiagnoser&lt;/a&gt;.
I extracted out the pi calculation to a method, put a benchmark around it, and
finally got some assembly code that was comparable to the C program&amp;rsquo;s assembly.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&#34;#assembly&#34;&gt;appendix&lt;/a&gt; for the C# disassembly.&lt;/p&gt;
&lt;h2 id=&#34;what-does-it-all-mean&#34;&gt;What does it all mean?&lt;/h2&gt;
&lt;p&gt;Having the machine code generated from the C and C# code let me do a like for
like comparison of each program. I&amp;rsquo;ve put the assembly code of just the for
loops in an &lt;a href=&#34;#assembly&#34;&gt;appendix&lt;/a&gt; at the end of this post.&lt;/p&gt;
&lt;p&gt;The first challenge was understanding what all the instructions meant! This
&lt;a href=&#34;https://www.intel.com/content/dam/develop/external/us/en/documents/introduction-to-x64-assembly-181178.pdf&#34;&gt;quick introduction to x64 assembly&lt;/a&gt;
(pdf) &lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; was a good primer. This &lt;a href=&#34;https://www.felixcloutier.com/x86/&#34;&gt;x86 reference&lt;/a&gt; &lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;
got me the rest of the way to a basic understanding of what was happening.
Rather than decode every instruction and figure out which variables were being
stored in which registers, I thought I&amp;rsquo;d just play around with the C compilation
options to get a feel for what changes.&lt;/p&gt;
&lt;p&gt;Gcc has many options to control the generated machine code. I&amp;rsquo;ll summarise the
relevant options here. For more details, see &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html&#34;&gt;gcc&amp;rsquo;s optimize options&lt;/a&gt; &lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;
and &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html&#34;&gt;gcc options summary&lt;/a&gt;.&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;I found that the top contributors to program run time were
&lt;code&gt;-O3 -march=native -fassociative-math -fno-signed-zeros -fno-trapping-math&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;O1&lt;/code&gt;, &lt;code&gt;O2&lt;/code&gt;, &lt;code&gt;O3&lt;/code&gt; are shorthand for a collection of optimisation settings, &lt;code&gt;O3&lt;/code&gt;
being the highest setting&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-march=native&lt;/code&gt;: compile for the host CPU, using any instructions it supports.
This is generally only done for numerically intensive code, at the cost of
portability. Most widely distributed C programs won&amp;rsquo;t use this option, as it
limits the number of CPUs the program can run on. For more details see this
stack overflow question: &lt;a href=&#34;https://stackoverflow.com/questions/52653025/why-is-march-native-used-so-rarely&#34;&gt;Why is -march=native used so rarely?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-fassociative-math&lt;/code&gt;: reorders floating point operations for efficiency,
possibly causing underflow / overflow / NaNs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-fno-signed-zeros&lt;/code&gt;: ignore the sign of zeros&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-fno-trapping-math&lt;/code&gt;: assume that there will be no &amp;ldquo;division by zero, overflow,
underflow, inexact result and invalid operation&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last three options may cause violations of IEEE or ANSI standards, and are
referred to as &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#index-funsafe-math-optimizations&#34;&gt;unsafe math optimizations&lt;/a&gt;.
I assume this is not necessarily a bad thing, if you know what you&amp;rsquo;re doing.
Indeed, the value of pi calculated with these options varied slightly from the
value calculated without them (and by the C# code), but all calculated pi values
were still accurate to 7 decimal places.&lt;/p&gt;
&lt;p&gt;Using just the &lt;code&gt;-O3&lt;/code&gt; option, the C program took 120ms, which is the same as C#
program, ignoring start-up time. &lt;code&gt;-march=native&lt;/code&gt; didn&amp;rsquo;t make a big difference
unless the unsafe math options were enabled. If you compare the assembly of the
&amp;lsquo;unsafe&amp;rsquo; and the &amp;lsquo;safe&amp;rsquo; options, you can see that the unsafe assembly uses &lt;code&gt;ymm&lt;/code&gt;
registers (256 bit registers), allowing more calculations to be done per CPU
instruction. It also only loops 12.5 million times, versus the 100 million times
for the safe assembly. Intuitively, this explains the speedup to me: The unsafe
assembly runs 8x fewer loops, but runs about twice as many instructions per
loop, resulting in a 4x speedup. I don&amp;rsquo;t know if that&amp;rsquo;s the exact reason, but
I&amp;rsquo;m satisfied enough with that answer for now.&lt;/p&gt;
&lt;h2 id=&#34;vectorization&#34;&gt;Vectorization&lt;/h2&gt;
&lt;p&gt;What gcc is doing with the unsafe compilation options above is vectorizing the
loop. There&amp;rsquo;s a great explanation of vectorization here: &lt;a href=&#34;https://stackoverflow.com/questions/1422149/what-is-vectorization&#34;&gt;Stack Overflow: What is &amp;ldquo;vectorization&amp;rdquo;?&lt;/a&gt;.
In a sentence, it&amp;rsquo;s the compiler generating code that executes multiple loop
iterations at once, using more efficient CPU instructions.&lt;/p&gt;
&lt;p&gt;Gcc was able to automatically vectorize the C code, albeit with the unsafe math
options. The C programmer also needed to know that writing
&lt;code&gt;double x = -1.0 + 2.0 * (i &amp;amp; 0x1)&lt;/code&gt; allows the compiler to vectorize, while &lt;code&gt;x *= -1&lt;/code&gt;
doesn&amp;rsquo;t. I didn&amp;rsquo;t investigate why, but I assume it&amp;rsquo;s due to the first code
determining the value of &lt;code&gt;x&lt;/code&gt; using only the loop counter, while the second code
determines &lt;code&gt;x&lt;/code&gt; from the value of &lt;code&gt;x&lt;/code&gt; in the previous loop.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s also possible to write vectorized code yourself, as demonstrated by the
&lt;a href=&#34;https://github.com/niklas-heer/speed-comparison/blob/master/src/leibniz_avx2.cpp&#34;&gt;leibniz_avx2.cpp&lt;/a&gt;
code in speed-comparison. On my machine, this beat the auto-vectorized C by a
couple of milliseconds, without needing the unsafe math options. Java and C# also
support manual vectorization, however the result in speed-comparison is underwhelming:
&lt;a href=&#34;https://github.com/niklas-heer/speed-comparison/blob/master/src/leibnizVecOps.java&#34;&gt;this vectorized Java code&lt;/a&gt;
performs 3 times worse than its &lt;a href=&#34;https://github.com/niklas-heer/speed-comparison/blob/master/src/leibniz.java&#34;&gt;non-vectorized counterpart&lt;/a&gt;!
It&amp;rsquo;d be interesting to see if C# fares any better. &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/standard/simd&#34;&gt;Microsoft remarks&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SIMD [vectorization] is more likely to remove one bottleneck and expose the
next, for example memory throughput. In general the performance benefit of
using SIMD varies depending on the specific scenario, and in some cases it can
even perform worse than simpler non-SIMD equivalent code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;the-end&#34;&gt;The end&lt;/h1&gt;
&lt;p&gt;So there we have it! For this particular code, C runs 5x faster than C# by
relaxing some strict IEEE calculation rules, auto-vectorizing the loop, and
having a very low start-up time.&lt;/p&gt;
&lt;p&gt;Ignoring start-up time, C# was as fast as standards-compliant C, but vastly
outperformed by manually vectorized C++ code. It may be possible to manually
vectorize the C# code, but I&amp;rsquo;ll leave that for a later post.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s important to note that the code compared in this post is by no means a fair
comparison of the performance of C and C# in general, and there are many more
factors to consider when choosing a programming language. Have a look at the
links in &lt;a href=&#34;#readings&#34;&gt;appendix B&lt;/a&gt; for some more perspective.&lt;/p&gt;
&lt;h1 id=&#34;assembly&#34;&gt;Appendix A: assembly&lt;/h1&gt;
&lt;p&gt;Assembly for C and C#. Only the pi calculation loop is shown.&lt;/p&gt;
&lt;p&gt;C with unsafe math optimizations: (&lt;code&gt;-O3 -march=native -fassociative-math -fno-signed-zeros -fno-trapping-math&lt;/code&gt;, 30ms):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;address:  instruction (bytes)   instruction (assembly)        # my understanding of what&amp;#39;s happening
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;1130:&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;c5&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fd&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c2&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;vmovdqa&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ymm0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;ymm2&lt;/span&gt;             &lt;span style=&#34;color:#75715e&#34;&gt;# ymm0 = ymm2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;1134:&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;ff&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c0&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;inc&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;# eax += 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;1136:&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;c5&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fe&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;d7&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;vpaddd&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ymm2&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;ymm2&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;ymm7&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;# ymm2 += (4xi64)ymm7
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;113&lt;/span&gt;a:      &lt;span style=&#34;color:#a6e22e&#34;&gt;c5&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fd&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;db&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ce&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;vpand&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;ymm1&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;ymm0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;ymm6&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;# ymm1 = (4xi64)ymm0 &amp;amp; ymm6
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;113&lt;/span&gt;e:      &lt;span style=&#34;color:#a6e22e&#34;&gt;c5&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fd&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;f0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;vpslld&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ymm0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;ymm0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# ymm0 &amp;lt;&amp;lt;= 1, ie. ymm0 *= 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;1143:&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;c5&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fd&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fe&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c5&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;vpaddd&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ymm0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;ymm0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;ymm5&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;# ymm0 += ymm5     (ymm5 = -1?, see 1117)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;1147:&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;c5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;e6&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c9&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;vcvtdq2pd&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ymm9&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm1&lt;/span&gt;           &lt;span style=&#34;color:#75715e&#34;&gt;# (4xi64) ymm9 = (4x double?)xmm1 ... https://www.felixcloutier.com/x86/cvtdq2pd
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;114&lt;/span&gt;b:      &lt;span style=&#34;color:#a6e22e&#34;&gt;c4&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;e3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;d&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c9&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;vextracti128&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;xmm1&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;ymm1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# xmm1 = ymm1[255:128]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;1151:&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;c5&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fe&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;e6&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c9&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;vcvtdq2pd&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ymm1&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm1&lt;/span&gt;           &lt;span style=&#34;color:#75715e&#34;&gt;# (4xi64) ymm1 = (4x double?)xmm1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;1155:&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;c5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;e6&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;d0&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;vcvtdq2pd&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ymm10&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm0&lt;/span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# (4xi64) ymm10 = (4x double?)xmm0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;1159:&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;c4&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;e3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;d&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;vextracti128&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;xmm0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;ymm0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# xmm0 = ymm0[255:128]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;115&lt;/span&gt;f:      &lt;span style=&#34;color:#a6e22e&#34;&gt;c4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;e5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;cc&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;vfmadd132pd&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ymm9&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;ymm3&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;ymm4&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# (4x double): ymm9 = ymm9 * ymm4 + ymm3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;1164:&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;c5&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fe&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;e6&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c0&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;vcvtdq2pd&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ymm0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm0&lt;/span&gt;           &lt;span style=&#34;color:#75715e&#34;&gt;# (4xi64) ymm0 = (4x double?)xmm0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;1168:&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;c4&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;e2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;e5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;cc&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;vfmadd132pd&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ymm1&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;ymm3&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;ymm4&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# (4x double): ymm1 = ymm1 * ymm4 + ymm3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;116&lt;/span&gt;d:      &lt;span style=&#34;color:#a6e22e&#34;&gt;c4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ca&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;vdivpd&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ymm9&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;ymm9&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;ymm10&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# ymm9 /= ymm10
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;1172:&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;c5&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;f5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c0&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;vdivpd&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ymm0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;ymm1&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;ymm0&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;# ymm0 = ymm1/ymm0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;1176:&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;c5&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;b5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c0&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;vaddpd&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ymm0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;ymm9&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;ymm0&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;# ymm0 += ymm9
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;117&lt;/span&gt;a:      &lt;span style=&#34;color:#a6e22e&#34;&gt;c5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;d&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c0&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;vaddpd&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ymm8&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;ymm8&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;ymm0&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;# ymm8 += ymm0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;117&lt;/span&gt;e:      &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bc&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;be&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;cmp&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0xbebc20&lt;/span&gt;           &lt;span style=&#34;color:#75715e&#34;&gt;# if eax != 12500000 (=100M/8)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;1183:&lt;/span&gt;      &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;75&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ab&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;jne&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;1130&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;main&lt;/span&gt;+&lt;span style=&#34;color:#ae81ff&#34;&gt;0x90&lt;/span&gt;&amp;gt;       &lt;span style=&#34;color:#75715e&#34;&gt;# goto 1130
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Safe C (&lt;code&gt;-O3 -march=native&lt;/code&gt;, 120ms):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;address:  instruction (bytes)   instruction (assembly)        # my understanding of what&amp;#39;s happening
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;1120:&lt;/span&gt;      &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;89&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c1&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;ecx&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# ecx = eax
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;1122:&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;c5&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;e3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;d2&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;vcvtsi2sd&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;xmm2&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm3&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;edx&lt;/span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;# xmm2 = (double)edx?  https://www.felixcloutier.com/x86/cvtsi2sd
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;1126:&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;ff&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c0&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;inc&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;# eax += 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;1128:&lt;/span&gt;      &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;83&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;              &lt;span style=&#34;color:#66d9ef&#34;&gt;add&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;edx&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# edx += 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;112&lt;/span&gt;b:      &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;83&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;              &lt;span style=&#34;color:#66d9ef&#34;&gt;and&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;ecx&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# ecx &amp;amp;= 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;112&lt;/span&gt;e:      &lt;span style=&#34;color:#a6e22e&#34;&gt;c5&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;e3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c9&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;vcvtsi2sd&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;xmm1&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm3&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;ecx&lt;/span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;# xmm1 = (double)ecx?
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;1132:&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;c4&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;e2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;d9&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;cd&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;vfmadd132sd&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;xmm1&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm4&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm5&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# xmm1 = xmm1 * xmm5 + xmm4
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;1137:&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;c5&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;f3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ca&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;vdivsd&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;xmm1&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm1&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm2&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;# xmm1 /= xmm2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;113&lt;/span&gt;b:      &lt;span style=&#34;color:#a6e22e&#34;&gt;c5&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fb&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c1&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;vaddsd&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;xmm0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm1&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;# xmm0 += xmm1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;113&lt;/span&gt;f:      &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;e1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;f5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;cmp&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x5f5e102&lt;/span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# if eax != 100M+2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;1144:&lt;/span&gt;      &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;75&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;da&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;jne&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;1120&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;main&lt;/span&gt;+&lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;&amp;gt;       &lt;span style=&#34;color:#75715e&#34;&gt;# goto 1120
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;C# (BenchmarkDotNet):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;M01_L00:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;; instruction    params               # my understanding
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;vmulsd&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;xmm0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm2&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;# xmm0 *= xmm2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;lea&lt;/span&gt;              &lt;span style=&#34;color:#66d9ef&#34;&gt;edx&lt;/span&gt;,[&lt;span style=&#34;color:#66d9ef&#34;&gt;rax&lt;/span&gt;*&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;-&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]      &lt;span style=&#34;color:#75715e&#34;&gt;# edx = *(rax*2-1)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;vxorps&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;xmm3&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm3&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm3&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;# xmm3 = 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;vcvtsi2sd&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;xmm3&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm3&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;edx&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# xmm3 = (double)edx
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;vdivsd&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;xmm3&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm3&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;# xmm3 = xmm0 / xmm3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;vaddsd&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;xmm1&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm3&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm1&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;# xmm1 = xmm3 + xmm1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;inc&lt;/span&gt;              &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# eax += 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;cmp&lt;/span&gt;              &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;F5E102&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# if eax &amp;lt; 100M+2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;jl&lt;/span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;M01_L00&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# goto M01_L00
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;C# (Visual Studio, not optimised):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;address          instruction (assembly)                      # my understanding of what&amp;#39;s happening
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00007&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FFF1835417B&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;vmovsd&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;xmm0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;qword&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ptr&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;rbp-48h&lt;/span&gt;]        &lt;span style=&#34;color:#75715e&#34;&gt;# xmm0 = *(rbp-48h)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00007&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FFF18354180&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;vmulsd&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;xmm0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm0&lt;/span&gt;,                      &lt;span style=&#34;color:#75715e&#34;&gt;# xmm0 = xmm0 * *(07FFF18354210)    mmword ptr [Program.&amp;lt;&amp;lt;Main&amp;gt;$&amp;gt;g__CalcPi|0_0()+0E0h (07FFF18354210h)]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00007&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FFF18354188&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;vmovsd&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;qword&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ptr&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;rbp-48h&lt;/span&gt;],&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm0&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# *(rbp-48h) = xmm0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00007&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FFF1835418D&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;vmovsd&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;xmm0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;qword&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ptr&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;rbp-48h&lt;/span&gt;]        &lt;span style=&#34;color:#75715e&#34;&gt;# xmm0 = *(rbp-48h)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00007&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FFF18354192&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;dword&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ptr&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;rbp-4Ch&lt;/span&gt;]         &lt;span style=&#34;color:#75715e&#34;&gt;# eax = *(rbp-4Ch)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00007&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FFF18354195&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;lea&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;,[&lt;span style=&#34;color:#66d9ef&#34;&gt;rax&lt;/span&gt;*&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;-&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]                   &lt;span style=&#34;color:#75715e&#34;&gt;# eax = *(rax*2-1)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00007&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FFF1835419C&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;vxorps&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;xmm1&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm1&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm1&lt;/span&gt;                  &lt;span style=&#34;color:#75715e&#34;&gt;# xmm1 = 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00007&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FFF183541A0&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;vcvtsi2sd&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;xmm1&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm1&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;                   &lt;span style=&#34;color:#75715e&#34;&gt;# xmm1 = (double)eax?  https://www.felixcloutier.com/x86/cvtsi2sd
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00007&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FFF183541A4&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;vdivsd&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;xmm0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm1&lt;/span&gt;                  &lt;span style=&#34;color:#75715e&#34;&gt;# xmm0 /= xmm1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00007&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FFF183541A8&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;vaddsd&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;xmm0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;mmword&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ptr&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;rbp-40h&lt;/span&gt;]  &lt;span style=&#34;color:#75715e&#34;&gt;# xmm0 += *(rbp-40h)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00007&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FFF183541AD&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;vmovsd&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;qword&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ptr&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;rbp-40h&lt;/span&gt;],&lt;span style=&#34;color:#66d9ef&#34;&gt;xmm0&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# *(rbp-40h) = xmm0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00007&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FFF183541B2&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;dword&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ptr&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;rbp-4Ch&lt;/span&gt;]         &lt;span style=&#34;color:#75715e&#34;&gt;# eax = *(rbp-4Ch)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00007&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FFF183541B5&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;inc&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;                             &lt;span style=&#34;color:#75715e&#34;&gt;# eax += 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00007&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FFF183541B7&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;dword&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ptr&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;rbp-4Ch&lt;/span&gt;],&lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;# *(rbp-4Ch) = eax
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00007&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FFF183541BA&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;ecx&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;dword&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ptr&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;rbp-58h&lt;/span&gt;]         &lt;span style=&#34;color:#75715e&#34;&gt;# ecx = *(rbp-58h)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00007&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FFF183541BD&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;dec&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;ecx&lt;/span&gt;                             &lt;span style=&#34;color:#75715e&#34;&gt;# ecx -= 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00007&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FFF183541BF&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;dword&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ptr&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;rbp-58h&lt;/span&gt;],&lt;span style=&#34;color:#66d9ef&#34;&gt;ecx&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;# *(rbp-58h) = ecx
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00007&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FFF183541C2&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;cmp&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;dword&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ptr&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;rbp-58h&lt;/span&gt;],&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;           &lt;span style=&#34;color:#75715e&#34;&gt;# if *(rbp-58h) &amp;gt; 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00007&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FFF183541C6&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;jg&lt;/span&gt;                                          &lt;span style=&#34;color:#75715e&#34;&gt;# goto 07FFF183541D6   Program.&amp;lt;&amp;lt;Main&amp;gt;$&amp;gt;g__CalcPi|0_0()+0A6h (07FFF183541D6h)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00007&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FFF183541C8&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;lea&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;rcx&lt;/span&gt;,[&lt;span style=&#34;color:#66d9ef&#34;&gt;rbp-58h&lt;/span&gt;]                   &lt;span style=&#34;color:#75715e&#34;&gt;# rcx = *(rbp-58h)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00007&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FFF183541CC&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;edx&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;h&lt;/span&gt;                         &lt;span style=&#34;color:#75715e&#34;&gt;# edx = 51
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00007&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FFF183541D1&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;call&lt;/span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;00007&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FFF77D8C9B0&lt;/span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# call mystery function. appears to be JIT related
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00007&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FFF183541D6&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;cmp&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;dword&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ptr&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;rbp-4Ch&lt;/span&gt;],&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;F5E102h&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# if *(rbp-4Ch) &amp;lt; 100M +2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00007&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FFF183541DD&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;jl&lt;/span&gt;                                          &lt;span style=&#34;color:#75715e&#34;&gt;# goto 07FFF1835417B
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;readings&#34;&gt;Appendix B: Interesting reading&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/5326269/is-c-sharp-really-slower-than-say-c&#34;&gt;Is C# slower than say C++?&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/a/5331574/2670469&#34;&gt;detailed generic answer&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;covers language features, VM, GC, benchmarks&lt;/li&gt;
&lt;li&gt;conclusion: you can almost always write C/C++ that&amp;rsquo;s faster than C#,
but not the other way around&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/a/37103437/2670469&#34;&gt;specific case answer&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;yes, but it may take a C++ expert significant time to make it run
faster than C#&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codinghorror.com/the-bloated-world-of-managed-code/&#34;&gt;Jeff Atwood: The bloated world of Managed Code&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;C# cons: slower, uses more memory&lt;/li&gt;
&lt;li&gt;C# pros: faster development&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codinghorror.com/on-managed-code-performance/&#34;&gt;Jeff Atwood: On Managed Code Performance&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;C# pro: security: buffer overruns possible in C/C++ can&amp;rsquo;t happen in C#&lt;/li&gt;
&lt;li&gt;quake 2 .NET port was initially faster than the C version, but 15% slower
after C targeted the host CPU, and 30% slower than the hand-optimised
assembly version&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/standard/assembly/file-format&#34;&gt;.NET assembly file format&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/standard/managed-execution-process#compiling-msil-to-native-code&#34;&gt;Compiling MSIL to Native Code&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.intel.com/content/dam/develop/external/us/en/documents/introduction-to-x64-assembly-181178.pdf&#34;&gt;Introduction to x64 assembly&lt;/a&gt; (pdf)&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.felixcloutier.com/x86/&#34;&gt;x86 and amd64 instruction reference&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html&#34;&gt;GCC: Options That Control Optimization&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:6&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html&#34;&gt;GCC: Option Summary&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Making C# Go Fast</title>
      <link>https://iamwoz.com/blog/20230330_making_csharp_go_fast/</link>
      <pubDate>Tue, 16 May 2023 12:20:53 +1100</pubDate>
      
      <guid>https://iamwoz.com/blog/20230330_making_csharp_go_fast/</guid>
      <description>&lt;h1 id=&#34;contents&#34;&gt;Contents&lt;/h1&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#contents&#34;&gt;Contents&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#what-im-optimising&#34;&gt;What I&amp;rsquo;m optimising&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#progress-log&#34;&gt;Progress log&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#plan&#34;&gt;Plan&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#round-1-from-7-to-12-gamessec&#34;&gt;Round 1: from 7 to 12 games/sec&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#round-2-from-12-to-20-gamessec&#34;&gt;Round 2: from 12 to 20 games/sec&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#round-3-from-20-to-50-gamessec&#34;&gt;Round 3: from 20 to 50 games/sec&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#round-4-from-50-to--200-oh&#34;&gt;Round 4: from 50 to &amp;hellip; 200!? Oh&amp;hellip;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#round-5-from-78-to-124&#34;&gt;Round 5: from 78 to 124&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#i_made_it&#34;&gt;I made it!&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#all-changes-ranked-by--speedup&#34;&gt;All changes, ranked by % speedup&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#what-kind-of-changes-improved-performance&#34;&gt;What kind of changes improved performance?&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#practical-lessons-learned&#34;&gt;Practical lessons learned&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I finally finished my implementation of the pandemic board game (&lt;a href=&#34;https://iamwoz.com/blog/20210924_learning_ddd_by_implementing_pandemic/&#34;&gt;original
post&lt;/a&gt;). I didn&amp;rsquo;t
focus on making the implementation fast, so it wasn&amp;rsquo;t much of a surprise to see
that it could only play about 7 games per second. I want to be able to run
search algorithms to win each game, and there&amp;rsquo;s many trillions of possible
games. 7 games per second isn&amp;rsquo;t going to get through all of those in a hurry, so
I took the opportunity to learn more about C# performance and profiling while
speeding it up.&lt;/p&gt;
&lt;p&gt;In this post I&amp;rsquo;ll show a small diary of my progress, learnings and mistakes. In
the end, I manage to run over 100 games per second. This won&amp;rsquo;t be a deep dive
into profiling or C#, but rather a practical example of using profilers to guide
performance improvements. There are plenty of resources online that cover how to
use various profilers. See the references at the end of this post for a few. If
you want to skip the diary and just see a list of performance improvements and
lessons learned, skip to &lt;a href=&#34;#i_made_it&#34;&gt;I made it!&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As part of this project, I read &lt;a href=&#34;https://www.writinghighperf.net&#34;&gt;Writing High-Performance .NET Code&lt;/a&gt;
&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; by Ben Watson. It helped me understand what to look for in the profiler
results. It&amp;rsquo;s a little dated now (C#7 was the latest at the time of writing),
but I still found a large amount of useful information, which I&amp;rsquo;ll add
throughout this post.&lt;/p&gt;
&lt;h2 id=&#34;what-im-optimising&#34;&gt;What I&amp;rsquo;m optimising&lt;/h2&gt;
&lt;h3 id=&#34;the-game&#34;&gt;The game&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re unfamiliar with &lt;a href=&#34;https://en.wikipedia.org/wiki/Pandemic_(board_game)&#34;&gt;Pandemic&lt;/a&gt;,
here&amp;rsquo;s a very simplified version of it:&lt;/p&gt;
&lt;figure&gt;
  &lt;img
    src=&#34;https://iamwoz.com/blog/20230330_making_csharp_go_fast/intro_pandemic_example.png&#34;
    alt=&#34;a little map of some Australian cities, representing a pandemic game board&#34;
    loading=&#34;lazy&#34; /&gt;
&lt;/figure&gt;
&lt;p&gt;The goal of all players is to discover the cure to 4 diseases. Throughout the
game, disease cases emerge and spread across the world. If the diseases spread
too widely, the players lose. Therefore, the players must balance their efforts
between treating disease cases, and discovering their cures.&lt;/p&gt;
&lt;p&gt;The image above demonstrates what the game board looks like. A player is
currently in Melbourne. There is a high level of &amp;lsquo;red&amp;rsquo; disease in Hobart,
represented by the three disease cubes there. There&amp;rsquo;s a research station in
Sydney. Diseases are cured by players at research stations, by spending cards
that they pick up at the end of each turn.&lt;/p&gt;
&lt;p&gt;You can find all the rules online, and play online at
&lt;a href=&#34;https://boardgamearena.com/gamepanel?game=pandemic&#34;&gt;https://boardgamearena.com/gamepanel?game=pandemic&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;my-code&#34;&gt;My code&lt;/h3&gt;
&lt;p&gt;The code I&amp;rsquo;m optimising starts at
&lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/3a5ff0a&#34;&gt;this commit&lt;/a&gt;,
where I&amp;rsquo;ve just added a
&lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/blob/3a5ff0afafcfaa823098ca3b8792eae0ede5bae6/pandemic.perftest/Program.cs#L5&#34;&gt;benchmarking and profiling app&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The pseudocode of what I&amp;rsquo;m trying to optimise:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  game &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; newGame()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; game &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; over:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    move &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; agent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_move(game)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    game &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; game&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;do(move)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The agent I want to optimise is a &lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/blob/3a5ff0afafcfaa823098ca3b8792eae0ede5bae6/pandemic.agents/GreedyAgent.cs#L7&#34;&gt;greedy agent&lt;/a&gt;,
which tries all legal moves from each state, and picks the move that results in
the best game state. &amp;lsquo;Best&amp;rsquo; is determined by a &lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/blob/3a5ff0afafcfaa823098ca3b8792eae0ede5bae6/pandemic.agents/GameEvaluator.cs#L17&#34;&gt;score&lt;/a&gt;
that I coded. The greedy agent looks a bit like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GreedyAgent&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;move&lt;/span&gt;(game):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; move &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; game&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legal_moves():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; score(game, move) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; best:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        best &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; move
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; best
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;score&lt;/span&gt;(game, move):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34; A combination of things, including:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - How many disease cubes are on cities?
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - How many diseases have been cured?
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - Does any player have enough cards to cure a disease?
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - How far are players away from important cities?
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;progress-log&#34;&gt;Progress log&lt;/h1&gt;
&lt;h2 id=&#34;plan&#34;&gt;Plan&lt;/h2&gt;
&lt;p&gt;The performance book &lt;sup id=&#34;fnref1:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; has a short chapter that can be used as a run sheet on
how to improve performance, which I decided to follow as a starting point. My
adaptation of the run sheet:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;define a performance goal &amp;amp; metrics
&lt;ul&gt;
&lt;li&gt;my goal: 100 games per second, on my regular development machine,
according to benchmarks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;create an environment that allows you to run repeatable benchmarks &amp;amp; profiles
&lt;ul&gt;
&lt;li&gt;I created a quick console app that could do fixed-time runs for profiling,
and run benchmarks using &lt;a href=&#34;https://benchmarkdotnet.org/&#34;&gt;BenchmarkDotNet&lt;/a&gt;:
&lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/blob/3a5ff0afafcfaa823098ca3b8792eae0ede5bae6/pandemic.perftest/Program.cs#L5&#34;&gt;my benchmarking app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;profile and analyse (I&amp;rsquo;ll use Rider&amp;rsquo;s profiling tools &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;)
&lt;ul&gt;
&lt;li&gt;CPU usage&lt;/li&gt;
&lt;li&gt;memory usage, time spent by the garbage collector (GC)&lt;/li&gt;
&lt;li&gt;time spent in JIT&lt;/li&gt;
&lt;li&gt;async/threads&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;look for the biggest time consumers, use the performance book&amp;rsquo;s advice to
reduce them&lt;/li&gt;
&lt;li&gt;repeat 3 &amp;amp; 4 until your performance goal is achieved&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My benchmark gives a single mean time per game figure when it&amp;rsquo;s done. To
measure the performance gain from each change, I&amp;rsquo;ll compare the time per game
before and after the change.
Percent improvement = &lt;code&gt;100 * (time per game before change / time after) - 100&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;round-1-from-7-to-12-gamessec&#34;&gt;Round 1: from 7 to 12 games/sec&lt;/h2&gt;
&lt;p&gt;The performance book &lt;sup id=&#34;fnref2:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; starts by describing the importance of understanding
how memory allocation and the garbage collector (GC) &lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; work in .NET. Therefore I started this round by
looking at allocations. The most allocations by size were &lt;code&gt;(city, distance)&lt;/code&gt;
tuples, in the
&lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/blob/3a5ff0afafcfaa823098ca3b8792eae0ede5bae6/pandemic.agents/GameEvaluator.cs#L178&#34;&gt;ClosestResearchStationTo&lt;/a&gt;
method. This method does a breadth-first search from the given city, until
it finds a city with a research station. It uses a hash set to store visited
cities, and a queue to enqueue the next neighbouring cities to visit.&lt;/p&gt;
&lt;figure&gt;
  &lt;img
    src=&#34;https://iamwoz.com/blog/20230330_making_csharp_go_fast/round_1_mem_profile.png&#34;
    alt=&#34;a screenshot of Rider&#39;s memory profiler&#34;
    loading=&#34;lazy&#34; /&gt;
  &lt;figcaption&gt;Memory profiler analysis. Time spent in GC is shown at the bottom right.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Given there&amp;rsquo;s a constant 48 cities in the game, it was straightforward to
&lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/02d44b3a5c65260fb9d33af429e2f5e7aff5fee2&#34;&gt;convert this method to use simple integer arrays&lt;/a&gt;.
This resulted in a 23% improvement. The biggest saving was actually from removing
the &lt;code&gt;HashSet&lt;/code&gt;, as the app was spending about 20% of its time looking for items
in the set. Look up &amp;ldquo;Contains&amp;rdquo; in the &lt;a href=&#34;https://source.dot.net/#q=hashset&#34;&gt;HashSet implementation&lt;/a&gt;
to see why. Although array and hash set lookup is constant time (&lt;code&gt;O(1)&lt;/code&gt;),
there&amp;rsquo;s a large constant in the hash set implementation being hidden by that Big
O notation.&lt;/p&gt;
&lt;p&gt;There were no more &lt;code&gt;(city, distance)&lt;/code&gt; tuples being allocated, however the time
spent in GC was still about 10%. I think the reason for this is due to the .NET
GC design - as long as the memory you allocate is out of scope by the next GC,
it won&amp;rsquo;t affect the time the GC takes to run. The lesson here, as mentioned in
the performance book, is to keep object lifetimes as short as possible, ensuring
they are collected while still in &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals#generations&#34;&gt;generation 0&lt;/a&gt; &lt;sup id=&#34;fnref1:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;The next highest allocations were of
&lt;code&gt;System.Collections.Immutable.ImmutableDictionary+&amp;lt;get_Values&amp;gt;d__27&amp;lt;Colour, Int32&amp;gt;&lt;/code&gt;,
coming from the
&lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/blob/3239ab12ade8a2a118e74b9243699336a7837735/pandemic/Values/City.cs#L16&#34;&gt;MaxNumCubes&lt;/a&gt;
method. My understanding of what&amp;rsquo;s happening here is that each call to
&lt;code&gt;ImmutableDictionary.Values&lt;/code&gt; instantiates a new iterator that traverses all items
in the dictionary. This is due to &lt;code&gt;Values&lt;/code&gt; being a &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/iterators&#34;&gt;iterator method&lt;/a&gt;.
(&lt;a href=&#34;https://source.dot.net/#System.Collections.Immutable/System/Collections/Immutable/ImmutableDictionary_2.cs,fcef75d0d45c76eb,references&#34;&gt;ImmutableDictionary.Values implementation&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I tried to find the naming convention for generated code like this, but I
couldn&amp;rsquo;t find an authoritative source. This
&lt;a href=&#34;https://blog.jetbrains.com/dotnet/2019/01/23/c-classes-memory-snapshots/&#34;&gt;JetBrains article&lt;/a&gt;
talks about code that gets generated from lambdas and closures, but doesn&amp;rsquo;t
mention where the names of the generated code classes/methods come from. It
seems to be something like &lt;code&gt;SomeClass+&amp;lt;method that generates code&amp;gt;x__id&amp;lt;types&amp;gt;&lt;/code&gt;.
&lt;code&gt;x&lt;/code&gt; appears to indicate the type, eg. &lt;code&gt;c&lt;/code&gt; for class, &lt;code&gt;d&lt;/code&gt; for delegate (?). The
id is a number to distinguish it from other generated code.&lt;/p&gt;
&lt;p&gt;In
&lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/f172f390696ea7be93a65ffa89849710dfb47da6&#34;&gt;f172f390&lt;/a&gt;,
I access each dictionary element directly, instead of iterating over all
elements. I also remove the use of the LINQ &lt;code&gt;Max&lt;/code&gt; method. These changes gave a
36% speedup.&lt;/p&gt;
&lt;h2 id=&#34;round-2-from-12-to-20-gamessec&#34;&gt;Round 2: from 12 to 20 games/sec&lt;/h2&gt;
&lt;p&gt;I was on a roll with following memory allocations, so I continued in this round.&lt;/p&gt;
&lt;p&gt;I made 60% improvement by removing LINQ in hot paths:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/d664cea8846c005655f891d20fb08427e6d26258&#34;&gt;PlayerHandScore: group, filter, sum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/4c6a8b188cccb11495cbeb59f97d81c989098c67&#34;&gt;PenaliseDiscards: filter, cast, group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/08a63cdb9a051c2f2c82b635d0f49e49d04915c8&#34;&gt;IsCured: search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/6055aedbbcdc365bef31d583dc4e690401548ac3&#34;&gt;HasEnoughToCure: group, count, search&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last change alone gave a 40% speedup in benchmarks, but only about 10%
during profiling runs. Running &lt;code&gt;RunSamples&lt;/code&gt; for longer didn&amp;rsquo;t affect the average
game time. There must be something different about how the benchmark app is
coded/built/run that produces a bigger improvement than the &amp;lsquo;samples&amp;rsquo; run. I
couldn&amp;rsquo;t figure it out :(. For now, here&amp;rsquo;s how to reproduce the difference:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git checkout 08a63cd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./runBenchmarks.sh    &lt;span style=&#34;color:#75715e&#34;&gt;# 68.67 ms/game&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./runSamples.sh       &lt;span style=&#34;color:#75715e&#34;&gt;# 12.40/sec (80.65ms/game)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git checkout 6055aed
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./runBenchmarks.sh    &lt;span style=&#34;color:#75715e&#34;&gt;# 50.72 ms/game (35.4% speedup)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./runSamples.sh       &lt;span style=&#34;color:#75715e&#34;&gt;# 13.15/sec (76.05ms/game, 6% speedup)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;facepalm-1-different-programs-profiles-can-look-the-same&#34;&gt;Facepalm #1: different programs&amp;rsquo; profiles can look the same&lt;/h3&gt;
&lt;p&gt;For a while I was confused as to why playing random games was so much faster
than greedy games. Greedy games were spending about 50% of their CPU time making
moves, and the other 50% searching for the best move. I thought this meant that
greedy games should be running at ~50% of random speed. They actually ran at
less than 1% of the speed. I&amp;rsquo;d had my head stuck in the profiler for too long -
the two agents work quite differently, which isn&amp;rsquo;t immediately obvious in the
profiler results. The greedy agent tries all possible moves before choosing the
best one, while the random agent immediately plays a random move. The greedy
agent thus spends a lot less time progressing the game than the random agent.&lt;/p&gt;
&lt;p&gt;This can be seen by profiling with tracing. Tracing counts calls to every method
in the program:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;greedy agent calls to &lt;code&gt;Do(action)&lt;/code&gt;: 4358. Random agent: 9550.&lt;/li&gt;
&lt;li&gt;greedy agent calls to &lt;code&gt;CreateNewGame()&lt;/code&gt;: 2. Random agent: 226&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The random agent makes on average 42 calls to &lt;code&gt;Do(action)&lt;/code&gt; per game, whereas the
greedy agent makes over 2000.&lt;/p&gt;
&lt;h2 id=&#34;round-3-from-20-to-50-gamessec&#34;&gt;Round 3: from 20 to 50 games/sec&lt;/h2&gt;
&lt;p&gt;I tried making a few more changes to reduce allocations, but these didn&amp;rsquo;t have
much of an effect. For this round, I decided to focus on CPU time instead.&lt;/p&gt;
&lt;p&gt;45%: &lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/1066696&#34;&gt;1066696&lt;/a&gt;: looking
up cities by array index instead of from a name:city dictionary. Similar to the
hash set in round 1, looking up cities with a dictionary is much more expensive
than an array.&lt;/p&gt;
&lt;p&gt;40%: &lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/compare/ee6443f..b600a04&#34;&gt;Storing cubes counts as integer fields rather than colour:int dictionaries&lt;/a&gt;.
Yet again, getting rid of expensive dictionary lookups.&lt;/p&gt;
&lt;p&gt;25%: &lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/15261296d03ae40bf4711ae0b746b4b55bfc88b3&#34;&gt;use ImmutableArray instead of ImmutableList for Players&lt;/a&gt;.
ImmutableArray is more targeted at performance than ImmutableList. There&amp;rsquo;s advice in
&lt;a href=&#34;https://devblogs.microsoft.com/dotnet/please-welcome-immutablearrayt&#34;&gt;this post&lt;/a&gt;
on when to use each. In this case, the top reason appears to be better performance
when iterating over the array in performance critical sections. A before &amp;amp; after
profile shows that the list consumes more time dealing with enumerators than the
array:&lt;/p&gt;
&lt;figure&gt;
  &lt;img
    src=&#34;https://iamwoz.com/blog/20230330_making_csharp_go_fast/round_3_immutable_list.png&#34;
    alt=&#34;a screenshot of Rider&#39;s profiler, showing ImmutableList method calls&#34;
    width=&#34;784&#34;
    loading=&#34;lazy&#34; /&gt;
  &lt;figcaption&gt;ImmutableList operations, before switching to ImmutableArray&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
  &lt;img
    src=&#34;https://iamwoz.com/blog/20230330_making_csharp_go_fast/round_3_immutable_array.png&#34;
    alt=&#34;a screenshot of Rider&#39;s profiler, showing ImmutableArray method calls&#34;
    width=&#34;737&#34;
    loading=&#34;lazy&#34; /&gt;
  &lt;figcaption&gt;ImmutableArray operations&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;facepalm-2---what-made-it-go-faster&#34;&gt;Facepalm #2 - what made it go faster?&lt;/h3&gt;
&lt;p&gt;This feels really dumb to have to explain, but I was stumped for an
embarrassingly long time by it. This section is for future me.&lt;/p&gt;
&lt;p&gt;I was having trouble explaining where the performance gains were coming from
when comparing the benchmarks and the profile results.&lt;/p&gt;
&lt;p&gt;I was measuring performance improvement by benchmark results, which gave me a
throughput figure (games per second). However, when running the profiler, I ran
the app for a fixed amount of time. This made it seem as though the benchmark
was giving better results than the profiler run. I&amp;rsquo;ll try to explain with
pictures.&lt;/p&gt;
&lt;p&gt;Say your app repeatedly calls two methods, A and B. You benchmark the app, and
find that its throughput is 10 per second. To profile it, you run the app for 1
second:&lt;/p&gt;
&lt;figure&gt;
  &lt;img
    src=&#34;https://iamwoz.com/blog/20230330_making_csharp_go_fast/derp_profile_1.png&#34;
    alt=&#34;a mockup of a CPU profiler run, showing functions A and B taking 500ms each&#34;
    width=&#34;622&#34;
    loading=&#34;lazy&#34; /&gt;
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;You then optimise A, and measure again. The benchmark shows a 33% improvement -
throughput is now 13.3 per second. However, the profile looks like this:&lt;/p&gt;
&lt;figure&gt;
  &lt;img
    src=&#34;https://iamwoz.com/blog/20230330_making_csharp_go_fast/derp_profile_2.png&#34;
    alt=&#34;a mockup of a CPU profiler run, showing function A taking 333ms and B taking 666ms&#34;
    width=&#34;622&#34;
    loading=&#34;lazy&#34; /&gt;
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;It looks as though you&amp;rsquo;ve made A 167ms faster, which is 16.7% of the time the
app runs. Where&amp;rsquo;s the rest of the 33% improvement?&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s there, but profiling the app for a fixed amount of time makes it harder to
see. You can find the throughput improvement by looking at the change of time spent in B,
since B&amp;rsquo;s code has not been modified.&lt;/p&gt;
&lt;p&gt;Let the initial number of calls to B = &lt;code&gt;x&lt;/code&gt;. Then:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;xB = 0.5s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The optimisation of A resulted in some change in throughput of the whole
application, which I&amp;rsquo;ll call &lt;code&gt;y&lt;/code&gt;. The app now spends 0.666s in B. So:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yxB = 0.666s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We want to know &lt;code&gt;y&lt;/code&gt;, so divide both sides by &lt;code&gt;xB&lt;/code&gt;, which we know is 0.5s:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yxB / xB = y = 0.666 / 0.5 = 1.33
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&amp;rsquo;s the 33% increase in throughput.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s easier to see where the performance gain was made by running the app for a
certain number of iterations. Say you run it for 10 iterations. Before the
optimisation, the run takes 1 second. Afterwards, it takes 750ms. The 33%
increase in throughput of the app is immediately obvious (1000 / 750 = 1.33),
and the 250ms saved all comes from A.&lt;/p&gt;
&lt;figure&gt;
  &lt;img
    src=&#34;https://iamwoz.com/blog/20230330_making_csharp_go_fast/derp_profile_3.png&#34;
    alt=&#34;a mockup of a CPU profiler run, showing A taking 250ms and B taking 500ms&#34;
    width=&#34;622&#34;
    loading=&#34;lazy&#34; /&gt;
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;There are still times when benchmarking may give quite different results to the
profiling run, as happened in round 2.&lt;/p&gt;
&lt;h2 id=&#34;round-4-from-50-to--200-oh&#34;&gt;Round 4: from 50 to &amp;hellip; 200!? Oh&amp;hellip;&lt;/h2&gt;
&lt;p&gt;I gained an easy 22% from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/3a5d3e98e025f59107245527e862fe2591dcfd7f&#34;&gt;Player.HasEnoughToCure: iterate over cards directly instead of using iterator method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/183fb212c6010154e7078eb820912d8ab01982e6&#34;&gt;Deck: use pre-sized array instead of list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, &lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/b9de07996671770f1ea4ed43f7fed9c07e94fa1f&#34;&gt;yielding available commands instead returning a list&lt;/a&gt;
caused a massive 310% improvement! Or, so I thought&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;mistake-facepalm-3&#34;&gt;Mistake! (facepalm #3)&lt;/h3&gt;
&lt;p&gt;I felt very satisfied with the great leap in performance, and assumed that it
all came from removing the repeated construction of the list. Later, I just
happened to notice that I had changed the way the greedy agent was playing
games. It was now making players pass their turn. It&amp;rsquo;s a completely valid move,
but hardly ever useful. As a result, it was losing games much faster than
before.&lt;/p&gt;
&lt;p&gt;Lesson learned - have tests in place that ensure your app behaves as expected,
before making performance changes. Be wary of large performance changes that you
can&amp;rsquo;t explain. Also, don&amp;rsquo;t put me in charge of a &lt;a href=&#34;https://en.wikipedia.org/wiki/Instrumental_convergence#Paperclip_maximizer&#34;&gt;paperclip factory&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;round-5-from-78-to-124&#34;&gt;Round 5: from 78 to 124&lt;/h2&gt;
&lt;p&gt;The biggest improvement in this round came from improving an algorithm, rather
than micro-optimisations. When computing the score for research stations, I was
originally running a breadth-first search for the closest stations to the &amp;lsquo;best&amp;rsquo;
cities, scoring higher the closer they were. Instead of running this search, I
&lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/2a5ecc3&#34;&gt;pre-computed the scores that cities would contribute&lt;/a&gt;.
This gave a 27% boost.&lt;/p&gt;
&lt;p&gt;Finally, a couple more quick wins to finish off:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;10%: &lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/e38df63&#34;&gt;cubes on city score: inline loop &amp;amp; method call&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;6%: &lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/de3eced&#34;&gt;remove LINQ &lt;code&gt;Sum&lt;/code&gt;, compute manually&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;i_made_it&#34;&gt;I made it!&lt;/h1&gt;
&lt;p&gt;I achieved my goal of 100 games per second! I could have kept going - I had
become addicted to the hit of seeing the benchmark score go up. That&amp;rsquo;s a good
reason to set a goal beforehand.&lt;/p&gt;
&lt;h2 id=&#34;all-changes-ranked-by--speedup&#34;&gt;All changes, ranked by % speedup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;45% &lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/1066696&#34;&gt;look up cities by array index instead of name:city dictionary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;40% &lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/compare/ee6443f..b600a04&#34;&gt;store cubes counts as integer fields rather than colour:int dictionaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;40% &lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/6055aedbbcdc365bef31d583dc4e690401548ac3&#34;&gt;remove LINQ: HasEnoughToCure: group, count, search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;36% &lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/f172f390696ea7be93a65ffa89849710dfb47da6&#34;&gt;remove iterator and LINQ: MaxNumCubes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;27% &lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/2a5ecc3&#34;&gt;replace search with pre-computed scores per city&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;25% &lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/15261296d03ae40bf4711ae0b746b4b55bfc88b3&#34;&gt;use ImmutableArray instead of ImmutableList for Players&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;23% &lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/02d44b3a5c65260fb9d33af429e2f5e7aff5fee2&#34;&gt;use integer array instead of HashSet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;22%:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/3a5d3e98e025f59107245527e862fe2591dcfd7f&#34;&gt;iterate over cards directly instead of using iterator method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/183fb212c6010154e7078eb820912d8ab01982e6&#34;&gt;use pre-sized array instead of list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;20%
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/d664cea8846c005655f891d20fb08427e6d26258&#34;&gt;remove LINQ: PlayerHandScore: group, filter, sum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/4c6a8b188cccb11495cbeb59f97d81c989098c67&#34;&gt;remove LINQ: PenaliseDiscards: filter, cast, group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/08a63cdb9a051c2f2c82b635d0f49e49d04915c8&#34;&gt;remove LINQ: IsCured&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;20% &lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/b9de07996671770f1ea4ed43f7fed9c07e94fa1f&#34;&gt;use an iterator method instead of building and returning a list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;10% &lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/e38df63&#34;&gt;inline loop &amp;amp; method call&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;6%  &lt;a href=&#34;https://github.com/uozuAho/pandemic_ddd/commit/de3eced&#34;&gt;remove LINQ: sum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-kind-of-changes-improved-performance&#34;&gt;What kind of changes improved performance?&lt;/h2&gt;
&lt;p&gt;The changes above boil down to a few simple dot points of advice. Measure your
application first before blindly applying these changes! The profiler will tell
you where making these changes will have the biggest benefit.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;replace LINQ with simple loops and arrays&lt;/li&gt;
&lt;li&gt;where possible, replace collections with arrays&lt;/li&gt;
&lt;li&gt;use ImmutableArray instead of ImmutableList&lt;/li&gt;
&lt;li&gt;pre-size arrays and collections&lt;/li&gt;
&lt;li&gt;pre-compute values that are known before runtime&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;practical-lessons-learned&#34;&gt;Practical lessons learned&lt;/h2&gt;
&lt;p&gt;In addition learning some technicalities of profiling and optimising C# code,
I learned a few valuable practical lessons while working on this project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Profile and benchmark in using the same build &amp;amp; run config
&lt;ul&gt;
&lt;li&gt;there can be large differences in performance between Release and Debug
modes - benchmark and profile in Release mode!&lt;/li&gt;
&lt;li&gt;benchmark.net doesn&amp;rsquo;t allow you to bench in Debug&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If you get a massive increase in performance that looks too good to be true,
it might be. Make sure you&amp;rsquo;ve got tests in place that catch any unintended
changes in application behaviour. See facepalm #3.&lt;/li&gt;
&lt;li&gt;If you haven&amp;rsquo;t focused on performance, then there will likely be many
significant gains to be made with little effort. Set yourself a deadline, and
just follow the profiler.&lt;/li&gt;
&lt;li&gt;Different profilers yield slightly different results, since they are more/less
intrusive on your application. For example, the timeline profile may show less
time spend in GC than the memory profiler.&lt;/li&gt;
&lt;li&gt;Rider&amp;rsquo;s profilers show all threads by default, including runtime threads. If
your app is single threaded, select the main thread to reduce noise in the
profiling results.&lt;/li&gt;
&lt;li&gt;From the perf book &lt;sup id=&#34;fnref3:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;: C# libraries are usually made with robustness and
convenience in mind, not performance. For example, LINQ. If you need
performance, you&amp;rsquo;ll likely have to use different libraries, or write your own
(usually more verbose) code.&lt;/li&gt;
&lt;li&gt;Stay aware of what you&amp;rsquo;re profiling - different programs can look similar in a
profiler, but behave very differently. See facepalm #1.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Writing High-Performance .NET Code, 2nd ed. &lt;a href=&#34;https://www.writinghighperf.net&#34;&gt;https://www.writinghighperf.net&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref1:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref2:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref3:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/dotnet/guide/tutorials/rider-profiling/&#34;&gt;JetBrains Rider profiling tutorial series&lt;/a&gt;: a small introduction to profiling in Rider, with demo apps&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals&#34;&gt;Fundamentals of garbage collection&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref1:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>What does the government do?</title>
      <link>https://iamwoz.com/blog/20220208_what-does-the-government-do/</link>
      <pubDate>Tue, 08 Feb 2022 21:00:33 +1100</pubDate>
      
      <guid>https://iamwoz.com/blog/20220208_what-does-the-government-do/</guid>
      <description>&lt;p&gt;For the upcoming Australian federal election, I want a quick summary view of
what politicians have been doing in their time in office, so I can decide if I
want to vote for them or not. I am physically incapable of listening to
politicians speak, and watching the news is a pretty inefficient way of finding
this information.&lt;/p&gt;
&lt;p&gt;Thankfully, &lt;a href=&#34;https://theyvoteforyou.org.au&#34;&gt;They Vote For You&lt;/a&gt; does a lot of
hard work to summarise what politicians are voting for in parliament. They get
their data from the &lt;a href=&#34;https://www.aph.gov.au/&#34;&gt;Australian parliament&lt;/a&gt;, which,
also thankfully, publishes a lot of information about what is going on.&lt;/p&gt;
&lt;p&gt;They Vote For You makes it easy to see what your representatives are voting for,
but doesn&amp;rsquo;t make it easy to see each party&amp;rsquo;s stance on an issue. This is where
&lt;a href=&#34;https://what-does-the-government-do.netlify.app/&#34;&gt;my site&lt;/a&gt; comes in. It uses
data provided by They Vote For You to show voting records at a party level.&lt;/p&gt;
&lt;p&gt;Have a go! &lt;a href=&#34;https://what-does-the-government-do.netlify.app/&#34;&gt;https://what-does-the-government-do.netlify.app/&lt;/a&gt;&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&#34;https://iamwoz.com/blog/20220208_what-does-the-government-do/20220208_votes_for_coal.png&#34;
  alt=&#34;&#34;
  width=&#34;1027&#34;
  loading=&#34;lazy&#34; /&gt;
  &lt;figcaption&gt;The Greens are the only sane party, right?&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;It&amp;rsquo;s not perfect - the votes recorded are from
&lt;a href=&#34;https://theyvoteforyou.org.au/help/faq#division&#34;&gt;divisions&lt;/a&gt;, which only make up
a small minority of all the votes happening parliament. There is plenty more
information published by the Australian parliament, but it&amp;rsquo;s nowhere near as
concise as the information here.&lt;/p&gt;
&lt;h2 id=&#34;technical-details&#34;&gt;Technical details&lt;/h2&gt;
&lt;p&gt;I used Netlify Functions to access the They Vote For You APIs. See &lt;a href=&#34;https://iamwoz.com/blog/20220126_netlify-functions/&#34;&gt;my post on
Netlify Functions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I ended up writing the HTML myself. Hugo &amp;amp; other static site generators all seem
to be most easily used to create blogs. I got frustrated trying to create a
custom site with Hugo. I kinda regret this choice, as there&amp;rsquo;s already a lot of
duplication between pages, but at least it was simple-ish to put together.&lt;/p&gt;
&lt;p&gt;I intended to write all the CSS myself, but quickly gave up and went with
&lt;a href=&#34;https://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt;. My initial version had no styling, and
my first &amp;ldquo;hallway usability test&amp;rdquo; failed dismally with my partner asking &amp;ldquo;Is it
supposed to look like this? It looks broken.&amp;rdquo; :P&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adding dynamic content to a Hugo site with Netlify Functions</title>
      <link>https://iamwoz.com/blog/20220126_netlify-functions/</link>
      <pubDate>Wed, 26 Jan 2022 12:55:48 +1100</pubDate>
      
      <guid>https://iamwoz.com/blog/20220126_netlify-functions/</guid>
      <description>&lt;p&gt;So far this site has just been static, pre-built pages (built by
&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;). I now want to load and display information from
other sites &amp;amp; services. I settled on using &lt;a href=&#34;https://www.netlify.com/products/functions/&#34;&gt;Netlify
Functions&lt;/a&gt; to create endpoints that
I could use to load data into this site&amp;rsquo;s pages.&lt;/p&gt;
&lt;p&gt;This post&amp;rsquo;s a tutorial for my future self and others :)&lt;/p&gt;
&lt;h2 id=&#34;options&#34;&gt;Options&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.netlify.com/products/functions/&#34;&gt;Netlify Functions&lt;/a&gt; allows you to
write web API endpoints just as easily as the rest of your static site content:
Write a function in the netlify/functions directory, push it to GitHub, done!&lt;/p&gt;
&lt;p&gt;Being a little wary of &amp;lsquo;vendor lock-in&amp;rsquo;, I had a quick look to see if there were
any services that would let me run containers as easily as Netlify functions.
&lt;a href=&#34;https://aws.amazon.com/fargate/&#34;&gt;AWS Fargate&lt;/a&gt; came close, but it still can&amp;rsquo;t
compete with the simplicity of Netlify functions. There&amp;rsquo;s really not much being
locked in anyway - no infrastructure code, scaling configuration, etc. It will
be easy to move to a more powerful platform in the future, if I need to.&lt;/p&gt;
&lt;h2 id=&#34;lets-do-it&#34;&gt;Let&amp;rsquo;s do it&lt;/h2&gt;
&lt;p&gt;These steps assume you&amp;rsquo;ve got a Hugo site up and running on Netlify. I&amp;rsquo;ve got
some details about how to do  that in my first post - &lt;a href=&#34;https://iamwoz.com/blog/20210424_how_this_site_is_built/&#34;&gt;how this site is
built&lt;/a&gt;. That post doesn&amp;rsquo;t really
clearly tell you how the site is built, but it&amp;rsquo;s a start :)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# install the netlify cli&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm i -g netlify-cli
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# link your project to your netlify site&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ntl link
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# create an example function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ntl functions:create
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This creates a function in your site that you can call from your site pages.
Here&amp;rsquo;s the default TypeScript code that gets created:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@netlify/functions&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Handler&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;event&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;stranger&amp;#39;&lt;/span&gt; } &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;event&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;queryStringParameters&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;statusCode&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;200&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;JSON.stringify&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`Hello, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;!`&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By default, functions are placed under &lt;code&gt;./netlify/functions&lt;/code&gt; directory in your
site. Once there, they can be called from within your page content. For example,
let&amp;rsquo;s replace some text with the response from the function when a button is
pressed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;static_text&amp;#34;&lt;/span&gt;&amp;gt;static text&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;replaceText()&amp;#34;&lt;/span&gt;&amp;gt;Replace static text&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;replaceText&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/.netlify/functions/hello-world?name=stinky&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      .&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;static_text&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;innerText&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can run the site locally with &lt;code&gt;ntl dev&lt;/code&gt; (&lt;code&gt;ntl dev -c &amp;quot;hugo server -D&amp;quot;&lt;/code&gt; to
show draft content). The Netlify CLI detects Hugo and runs that too, so site
content and functions are updated whenever you change them.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the above code in action:&lt;/p&gt;
&lt;hr&gt;
&lt;p id=&#34;some_id&#34;&gt;static text&lt;/p&gt;
&lt;button onclick=&#34;replaceText()&#34;&gt;Replace static text&lt;/button&gt;
&lt;script&gt;
  async function replaceText() {
    const response = await fetch(&#39;/.netlify/functions/hello-world?name=stinky&#39;)
      .then(response =&gt; response.json());

    document.getElementById(&#39;some_id&#39;).innerText = response.message;
  }
&lt;/script&gt;
&lt;hr&gt;
&lt;p&gt;If you open your browser dev tools and click the button, you&amp;rsquo;ll see the text
is being loaded via a network call to the hello-world API!&lt;/p&gt;
&lt;h2 id=&#34;deployment&#34;&gt;Deployment&lt;/h2&gt;
&lt;p&gt;Deployment &amp;lsquo;just works&amp;rsquo;. There&amp;rsquo;s no need to build containers, publish artifacts,
provision any infrastructure - your functions are useable as endpoints simply by
deploying your site as usual!&lt;/p&gt;
&lt;p&gt;The &amp;lsquo;hello world&amp;rsquo; endpoint used above is accessible here:
&lt;a href=&#34;https://iamwoz.com/.netlify/functions/hello-world&#34;&gt;https://iamwoz.com/.netlify/functions/hello-world&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;hiding-secrets-with-environment-variables&#34;&gt;Hiding secrets with environment variables&lt;/h2&gt;
&lt;p&gt;The example above is trivial, and doesn&amp;rsquo;t really need a web API - it could all
be done with JavaScript within the page. Here&amp;rsquo;s a more realistic use case.&lt;/p&gt;
&lt;p&gt;Say you want to use a 3rd party API that needs an API key. You could directly
call the API from the frontend, but that would mean exposing your API key for
all to see.&lt;/p&gt;
&lt;p&gt;A way around this is to create your own API that hides the 3rd party API key
value. This can be done using Netlify&amp;rsquo;s environment variables:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ntl env:set EXAMPLE_SECRET my-secret-value
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;ll create a separate API that loads and returns the secret, using &lt;code&gt;ntl functions:create&lt;/code&gt;. I called the function &lt;code&gt;get-secret&lt;/code&gt;. I modified the function
to this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@netlify/functions&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Handler&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;event&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;secret&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;env&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;EXAMPLE_SECRET&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;statusCode&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;200&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`my secret value is: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;secret&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here&amp;rsquo;s the same &amp;lsquo;click a button to replace text&amp;rsquo; example as before, but using
the environment variable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;secret_p&amp;#34;&lt;/span&gt;&amp;gt;Shhh....&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;showSecretValue()&amp;#34;&lt;/span&gt;&amp;gt;Show the secret!&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;showSecretValue&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/.netlify/functions/get-secret&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      .&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;text&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;secret_p&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;innerText&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p id=&#34;secret_p&#34;&gt;Shhh....&lt;/p&gt;
&lt;button onclick=&#34;showSecretValue()&#34;&gt;Show the secret!&lt;/button&gt;
&lt;script&gt;
  async function showSecretValue() {
    const response = await fetch(&#39;/.netlify/functions/get-secret&#39;)
      .then(response =&gt; response.text());

    document.getElementById(&#39;secret_p&#39;).innerText = response;
  }
&lt;/script&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;Further reading&lt;/h2&gt;
&lt;p&gt;I got most of the information for this post from &lt;a href=&#34;https://explorers.netlify.com/learn/up-and-running-with-serverless-functions/&#34;&gt;this Netlify
tutorial&lt;/a&gt;
There&amp;rsquo;s plenty more tutorials here: &lt;a href=&#34;https://functions.netlify.com/tutorials/&#34;&gt;https://functions.netlify.com/tutorials/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How Australian federal elections work</title>
      <link>https://iamwoz.com/blog/20211225_how_aus_federal_elections_work/</link>
      <pubDate>Sat, 25 Dec 2021 08:25:56 +1100</pubDate>
      
      <guid>https://iamwoz.com/blog/20211225_how_aus_federal_elections_work/</guid>
      <description>&lt;p&gt;I am ashamed to admit that I have only just recently put the effort in to learn
this. I have known &amp;ldquo;how to vote&amp;rdquo; since I was eligible to vote, but have never
fully understood:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Who am I voting for? What do they do?&lt;/li&gt;
&lt;li&gt;How does my vote lead to people getting elected?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is a &lt;em&gt;lot&lt;/em&gt; of information on the internet about this. Too much. This post
answers the above questions, in my preferred format of pictures and dot points.
Please note that I got super bored reading the many walls of text about this, so
there may be mistakes/inaccuracies in this post.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll explain some context first, so if you&amp;rsquo;re impatient:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#senate&#34;&gt;How to vote for senators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reps&#34;&gt;How to vote for lower house representatives&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;some-context-what-is-the-federal-government&#34;&gt;Some context: What is the federal government?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;there are 3 levels of government in Australia: federal, state, and local&lt;/li&gt;
&lt;li&gt;the federal government creates &amp;amp; updates laws, and &amp;lsquo;conducts affairs&amp;rsquo; that
affect the whole nation&lt;/li&gt;
&lt;li&gt;we elect &amp;lsquo;members of parliament&amp;rsquo; (MPs) that form the federal government&lt;/li&gt;
&lt;li&gt;the federal parliament is made up of 2 &amp;lsquo;houses&amp;rsquo;: the upper and lower house,
also known as the senate and house of representatives, respectively&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The 2 houses exist to keep each other &amp;lsquo;in check&amp;rsquo;. For example, before one
house decides to wage war with China, the other house has a chance to step
in and say &amp;ldquo;that&amp;rsquo;s probably not a good idea&amp;rdquo;. The representatives of each
house are chosen in different ways, to ensure diversity of opinion.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure&gt;
  &lt;img src=&#34;https://iamwoz.com/blog/20211225_how_aus_federal_elections_work/federal_parliament.png&#34;
  alt=&#34;&#34;
  width=&#34;1102&#34;
  loading=&#34;lazy&#34; /&gt;
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;For more details:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://peo.gov.au/understand-our-parliament/how-parliament-works/three-levels-of-government/three-levels-of-government-governing-australia/&#34;&gt;PEO: 3 levels of government&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.parliament.nsw.gov.au/about/Pages/The-Roles-and-Responsibilities-of-Federal-State-a.aspx&#34;&gt;NSW parliament: Roles and Responsibilities of Federal, State and Local Governments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Bicameralism#Australia&#34;&gt;Wikipedia: Bicameralism in Australia (why are there 2 houses)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;senate&#34;&gt;How to vote for senators (the big ballot paper)&lt;/h2&gt;
&lt;h3 id=&#34;casting-your-vote&#34;&gt;Casting your vote&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;you vote for senators to represent your state/territory. Your vote will count
towards 12 or 2 senators being elected, depending on whether you&amp;rsquo;re in a state
or territory.&lt;/li&gt;
&lt;li&gt;you rank candidates in order of preference. This can be done by voting either
above or below the line. See the image below.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
  &lt;img src=&#34;https://iamwoz.com/blog/20211225_how_aus_federal_elections_work/senate_ballot.png&#34;
  alt=&#34;&#34;
  width=&#34;680&#34;
  loading=&#34;lazy&#34; /&gt;
  &lt;figcaption&gt;
    The senate ballot paper. Voting above the line is equivalent to numbering
    all boxes below the line (don&#39;t vote above and below the line! Pick one!)
    &lt;a href=&#34;https://www.aph.gov.au/About_Parliament/Parliamentary_Departments/Parliamentary_Library/pubs/rp/rp1718/SenateVotingSystem&#34;&gt;source: APH&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;how-your-vote-gets-candidates-elected&#34;&gt;How your vote gets candidates elected&lt;/h3&gt;
&lt;p&gt;The short video below explains it better than I can. Here&amp;rsquo;s my attempt, anyway:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;candidates need a quota of votes to be elected&lt;/li&gt;
&lt;li&gt;quota = (total number of valid votes / number of vacancies + 1) + 1
&lt;ul&gt;
&lt;li&gt;for example: there are 1300 people in the state, and 12 senators to elect.
This means a candidate needs (1300 / 12 + 1) + 1 = 101 votes to be elected.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;first preferences are counted first. If any candidate receives the required
quota of first preferences, they are elected. Any &amp;lsquo;surplus&amp;rsquo; ballots that have
the winning candidate as their first preference get their second preferences
distributed to remaining candidates&lt;/li&gt;
&lt;li&gt;if no remaining candidate reaches the quota based on first preferences, then
second preferences are counted&lt;/li&gt;
&lt;li&gt;the above process continues, using lower and lower preferences, until the
required number of senators have been elected.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
  
  &lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
    &lt;iframe src=&#34;https://www.youtube.com/embed/9BqgiUarZDo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;How proportional voting works in the senate&#34;&gt;&lt;/iframe&gt;
  &lt;/div&gt;

  &lt;figcaption&gt;
    A short video describing the above points, but better
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;the above is slightly simplified. The amount your lower preferences contribute
depends on which state/territory you&amp;rsquo;re in.&lt;/li&gt;
&lt;li&gt;if voting below the line, you must choose at least 12 candidates. However, aim
for more, since there&amp;rsquo;s a chance your ballot can become &amp;rsquo;exhausted&amp;rsquo; - i.e.
your preferences don&amp;rsquo;t count towards any winning candidates. Even if you
dislike some candidates/parties, you should still rank them in order of your
preference, since this will count towards your &amp;rsquo;least disliked&amp;rsquo; candidates
getting elected.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sources&#34;&gt;Sources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ecanz.gov.au/electoral-systems/proportional&#34;&gt;ECANZ: Proportional Representation Voting Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://peo.gov.au/understand-our-parliament/having-your-say/elections-and-voting/federal-elections/&#34;&gt;PEO: federal elections&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reps&#34;&gt;How to vote for lower house representatives&lt;/h2&gt;
&lt;p&gt;Thankfully, this is simpler than the senate.&lt;/p&gt;
&lt;h3 id=&#34;casting-your-vote-1&#34;&gt;Casting your vote&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;you rank  candidates in order of preference&lt;/li&gt;
&lt;li&gt;your vote counts towards a single candidate being elected to represent your
electorate&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
  &lt;img src=&#34;https://iamwoz.com/blog/20211225_how_aus_federal_elections_work/lower_house_ballot.png&#34;
  alt=&#34;&#34;
  width=&#34;220&#34;
  loading=&#34;lazy&#34; /&gt;
  &lt;figcaption&gt;
    An example house of reps ballot paper.
    &lt;a href=&#34;https://aec.gov.au/Voting/How_to_Vote/Voting_HOR.htm&#34;&gt;Source: AEC&lt;/a&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;how-your-vote-gets-a-candidate-elected&#34;&gt;How your vote gets a candidate elected&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;to win, a candidate must get an absolute majority
&lt;ul&gt;
&lt;li&gt;eg. receives 51% of first preference vote&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;if no candidate gets a majority of first preferences, the candidate with
lowest number of 1st preferences is eliminated, and the 2nd preference from
those votes flow into the remaining candidates&lt;/li&gt;
&lt;li&gt;the above is repeated until one candidate reaches the majority&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
  
  &lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
    &lt;iframe src=&#34;https://www.youtube.com/embed/HaE6MigXYdY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;How preferential voting works in the lower house&#34;&gt;&lt;/iframe&gt;
  &lt;/div&gt;

  &lt;figcaption&gt;
    Another good short video, describing counting of votes for the house of
    representatives
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;image-sources&#34;&gt;Image sources&lt;/h2&gt;
&lt;p&gt;I copied images from these sources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jing.fm/iclip/u2q8r5o0u2o0i1o0_australia-clipart-parliament-house-parliament-house-canberra-clipart/&#34;&gt;https://www.jing.fm/iclip/u2q8r5o0u2o0i1o0_australia-clipart-parliament-house-parliament-house-canberra-clipart/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mappr.co/counties/australia/&#34;&gt;https://www.mappr.co/counties/australia/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atarnotes.com/voting-how-to/&#34;&gt;https://atarnotes.com/voting-how-to/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Jumping fences with socat</title>
      <link>https://iamwoz.com/blog/20211219_jumping_fences_with_socat/</link>
      <pubDate>Sun, 19 Dec 2021 07:50:17 +1100</pubDate>
      
      <guid>https://iamwoz.com/blog/20211219_jumping_fences_with_socat/</guid>
      <description>&lt;p&gt;There&amp;rsquo;s a kubernetes cluster I use often that runs software I&amp;rsquo;m responsible for.
The databases for that software are also in the kubernetes cluster, and are only
accessible to other resources in that cluster. This &lt;em&gt;can&lt;/em&gt; prevent silly mistakes
like accidentally dropping a table, but also makes prototyping difficult.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&#34;https://iamwoz.com/blog/20211219_jumping_fences_with_socat/initia_state.png&#34;
  alt=&#34;Image of me not being able to access my app&#39;s database&#34;
  width=&#34;645&#34;
  loading=&#34;lazy&#34; /&gt;
  &lt;figcaption&gt;Me, locked out from the juicy data&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;It should be possible to use &lt;a href=&#34;https://linux.die.net/man/1/socat&#34;&gt;socat&lt;/a&gt; as a
proxy to be able to connect to the database. &lt;code&gt;socat&lt;/code&gt; is a unix program that
pipes data between a wide range of sinks &amp;amp; sources, eg. network sockets &amp;amp; files.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&#34;https://iamwoz.com/blog/20211219_jumping_fences_with_socat/idea_state.png&#34;
  alt=&#34;Image of me accessing my app&#39;s database via socat&#34;
  width=&#34;669&#34;
  loading=&#34;lazy&#34; /&gt;
  &lt;figcaption&gt;My dream&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;practicing-with-docker&#34;&gt;Practicing with docker&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ll use docker since it will roughly simulate what I think I need to do with
kubernetes, and I don&amp;rsquo;t have to install postgres and/or &lt;code&gt;psql&lt;/code&gt; on my machine. I
have to re-learn docker every time I use it, so I&amp;rsquo;ll document my steps this
time.&lt;/p&gt;
&lt;h3 id=&#34;goal-1-connect-psql-to-postgres&#34;&gt;Goal #1: connect psql to postgres&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;psql&lt;/code&gt; is a postgres CLI client. I&amp;rsquo;m using it as a quick way to verify that I
can connect a postgres client to a postgres instance.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&#34;https://iamwoz.com/blog/20211219_jumping_fences_with_socat/psql_to_pg.png&#34;
  alt=&#34;psql in one container, connecting to postgres in another container&#34;
  width=&#34;422&#34;
  loading=&#34;lazy&#34; /&gt;
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Run postgres&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run --rm --name pg -e POSTGRES_PASSWORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pw -d postgres
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# There it is:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker ps
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; CONTAINER ID   IMAGE      COMMAND                  CREATED         STATUS         PORTS      NAMES
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; 6d2a5ad74c8e   postgres   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;docker-entrypoint.s…&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; seconds ago   Up &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; seconds   5432/tcp   pg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# OK. Can I connect to it with psql?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -it --rm postgres psql
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; psql: error: connection to server on socket &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/var/run/postgresql/.s.PGSQL.5432&amp;#34;&lt;/span&gt; failed: No such file or directory
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;       Is the server running locally and accepting connections on that socket?
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# No. Is there anything listening on port 5432?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;netstat -aon | grep &lt;span style=&#34;color:#ae81ff&#34;&gt;5432&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# No. Why? Because I didn&amp;#39;t expose the port that postgres serves over when&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# running the postgres container. Let&amp;#39;s do that. First, stop the currently&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# running postgres container:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker stop pg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Now run it again, exposing port 5432 to the host machine:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run --rm --name pg -e POSTGRES_PASSWORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pw -d -p 5432:5432 postgres
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Now there&amp;#39;s stuff listening on port 5432:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;netstat -aon | grep &lt;span style=&#34;color:#ae81ff&#34;&gt;5432&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;  TCP    0.0.0.0:5432           0.0.0.0:0              LISTENING       &lt;span style=&#34;color:#ae81ff&#34;&gt;16448&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;  TCP    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;::&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:5432              &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;::&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:0                 LISTENING       &lt;span style=&#34;color:#ae81ff&#34;&gt;16448&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;  TCP    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;::1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:5432             &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;::&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:0                 LISTENING       &lt;span style=&#34;color:#ae81ff&#34;&gt;18520&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Try psql again:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -it --rm postgres psql
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; psql: error: connection to server on socket &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/var/run/postgresql/.s.PGSQL.5432&amp;#34;&lt;/span&gt; failed: No such file or directory
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;       Is the server running locally and accepting connections on that socket?
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Still no. This is because I&amp;#39;m running the psql container in an isolated&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# (network) environment, where there&amp;#39;s nothing listening on port 5432. I can&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# use the special host address &amp;#39;host.docker.internal&amp;#39; which resolves to the IP&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# of the host machine (see https://docs.docker.com/desktop/windows/networking/):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -it --rm postgres psql -h host.docker.internal -U postgres
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; Password &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; user postgres: &lt;span style=&#34;color:#75715e&#34;&gt;# enter the password &amp;#39;pw&amp;#39; defined above&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; psql &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;14.1 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Debian 14.1-1.pgdg110+1&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; Type &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; help.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; postgres&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Woo! I&amp;#39;m in!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;goal-2-connect-psql-to-postgres-via-socat&#34;&gt;Goal #2: connect psql to postgres, via socat&lt;/h3&gt;
&lt;figure&gt;
  &lt;img src=&#34;https://iamwoz.com/blog/20211219_jumping_fences_with_socat/psql_to_socat_to_pg.png&#34;
  alt=&#34;psql in one container, connecting to socat in another container, which
  connects to postgres in a third container&#34;
  width=&#34;646&#34;
  loading=&#34;lazy&#34; /&gt;
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;run postgres on a non-default port (6543)&lt;/li&gt;
&lt;li&gt;use socat to pipe traffic between the non-default and default postgres port
(5432)&lt;/li&gt;
&lt;li&gt;run psql as in goal #1, which will show that it is connecting to postgres via
socat&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# stop the currently running postgres db&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker stop pg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Start it again, this time hosting on port 6543.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run --rm --name pg -e POSTGRES_PASSWORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pw -e PGPORT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6543&lt;/span&gt; -d -p 6543:6543 postgres
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Check it is running, by connecting psql directly:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -it --rm postgres psql -h host.docker.internal -U postgres -p &lt;span style=&#34;color:#ae81ff&#34;&gt;6543&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# All good. Now, time for socat. The dockerhub page for socat has nearly the&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# use case I want: &amp;#34;Publish a port on an existing container&amp;#34;. In my case, the&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# port is already published (6543), but I want to &amp;#34;republish&amp;#34; it on a different&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# port (5432).&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -d --rm --name sc -p 5432:6543 alpine/socat &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    tcp-listen:6543,fork,reuseaddr tcp-connect:target:6543
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# I don&amp;#39;t really understand what all those options are doing, so I&amp;#39;ll just hope&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# for the best :) Let&amp;#39;s try connecting psql. Note that psql uses the default&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# port (5432) when you don&amp;#39;t tell it to do otherwise.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -it --rm postgres psql -h host.docker.internal -U postgres
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; psql: error: connection to server at &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;host.docker.internal&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;192.168.65.2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, port &lt;span style=&#34;color:#ae81ff&#34;&gt;5432&lt;/span&gt; failed: server closed the connection unexpectedly
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;         This probably means the server terminated abnormally
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;         before or &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; processing the request.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# d&amp;#39;oh. Why?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker container logs sc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; 2021/12/18 01:28:47 socat&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;8&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; E getaddrinfo&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;target&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NULL&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;1,0,1,6&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;{})&lt;/span&gt;: Name does not resolve
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#34;Does not resolve&amp;#34;. I think means it can&amp;#39;t find the host. Did I need to&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# point socat to host.docker.internal?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker stop sc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -d --rm --name sc -p 5432:6543 alpine/socat &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    tcp-listen:6543,fork,reuseaddr tcp-connect:host.docker.internal:6543
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -it --rm postgres psql -h host.docker.internal -U postgres
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Yep, I&amp;#39;m in!!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;endgame&#34;&gt;Endgame&lt;/h2&gt;
&lt;p&gt;Time to try connecting to the database in kubernetes. Here&amp;rsquo;s the goal state
again:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&#34;https://iamwoz.com/blog/20211219_jumping_fences_with_socat/idea_state_ports.png&#34;
  alt=&#34;Me accessing my app&#39;s database via socat, with port numbers shown&#34;
  width=&#34;683&#34;
  loading=&#34;lazy&#34; /&gt;
  &lt;figcaption&gt;My dream, with ports&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;It&amp;rsquo;s basically the same as in goal #2, except:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;socat will be running in a pod in kubernetes&lt;/li&gt;
&lt;li&gt;socat will essentially just be &amp;lsquo;forwarding&amp;rsquo; postgres&amp;rsquo;s default port&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;ll need to use &lt;code&gt;kubectl&lt;/code&gt; to forward a local port to the socat pod&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# This is the host address of where the database is running. This is stored&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# in a secret location...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DB_HOST&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;asdf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAMESPACE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;my_apps_namespace
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SOCAT_POD_NAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;woz-db-proxy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Run socat in a pod in kubernetes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl run -n &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NAMESPACE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; --restart&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Never --image&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;alpine/socat &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;SOCAT_POD_NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; -- &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    tcp-listen:5432,fork,reuseaddr &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    tcp-connect:&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;DB_HOST&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;:5432
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Wait for the pod to be ready&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl wait -n &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NAMESPACE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; --for&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;condition&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Ready pod/&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;SOCAT_POD_NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Forward port 5432 to the pod&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl port-forward -n &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NAMESPACE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; pod/&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;SOCAT_POD_NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; 5432:5432
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# The moment of truth ... will it connect?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -it --rm postgres psql -h host.docker.internal -U my_user -d my_db
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; Password &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; user postgres:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; psql &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;14.1 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Debian 14.1-1.pgdg110+1&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; Type &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; help.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; postgres&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Woo #2! I&amp;#39;m in!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Delete the pod when I&amp;#39;m done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl delete -n &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NAMESPACE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; pod/&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;SOCAT_POD_NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; --grace-period &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; --wait&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wahoo! Now I can now do all kinds of silly stuff, like accidentally inserting
test data into production, dropping tables, and overwriting customer data. All
the fun things in life.&lt;/p&gt;
&lt;p&gt;I wonder if I could have just used &lt;code&gt;kubectl port-forward&lt;/code&gt; directly to the
database? Too late, I&amp;rsquo;ve already learned a bunch of stuff, and now I&amp;rsquo;m tired.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning DDD by making Pandemic</title>
      <link>https://iamwoz.com/blog/20210924_learning_ddd_by_implementing_pandemic/</link>
      <pubDate>Fri, 24 Sep 2021 16:40:58 +1000</pubDate>
      
      <guid>https://iamwoz.com/blog/20210924_learning_ddd_by_implementing_pandemic/</guid>
      <description>&lt;p&gt;Join me on my quest to learn some domain-driven design (DDD) while making a
board game. This is my longest post yet, so I&amp;rsquo;ve included a table of contents
for your convenience :)&lt;/p&gt;
&lt;p&gt;If you want to skip straight to the action, see &lt;a href=&#34;#lets_start&#34;&gt;Let&amp;rsquo;s just start&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;contents&#34;&gt;Contents&lt;/h1&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#contents&#34;&gt;Contents&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#its-been-done&#34;&gt;It&amp;rsquo;s been done&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#applying-ddd-tactics-to-pandemic&#34;&gt;Applying DDD tactics to Pandemic&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#how-to-handle-events-that-trigger-other-events&#34;&gt;How to handle events that trigger other events&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#lets_start&#34;&gt;Let&amp;rsquo;s just start&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#baby-steps&#34;&gt;Baby steps&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#first-complex-process&#34;&gt;First complex process&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#moving-away-from-event-sourcing&#34;&gt;Moving away from event sourcing&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#wrapping-up-this-post&#34;&gt;Wrapping up this post&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#appendix-ddd-concepts-used-in-this-post&#34;&gt;Appendix: DDD concepts used in this post&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#domain&#34;&gt;Domain&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#domain_event&#34;&gt;Domain event&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#event_storming&#34;&gt;Event storming&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#aggregate&#34;&gt;Aggregate&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#event_sourcing&#34;&gt;Event sourcing&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#further-reading--work&#34;&gt;Further reading / work&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;hr&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I have tried a number of times to implement the board game
&lt;a href=&#34;https://en.wikipedia.org/wiki/Pandemic_%28board_game%29&#34;&gt;Pandemic&lt;/a&gt;, so that I
could set AI upon it. Each attempt was a failure, due to the complexity of the
game rules causing my code to turn into a complex ball of mud. Recently I was
inspired to try again, after having the idea that &lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;domain-driven design
(DDD)&lt;/a&gt; may help me deal with
the complexity.&lt;/p&gt;
&lt;p&gt;I had known of domain-driven design for years, but had never looked closely into
it. I had a very basic understanding of some DDD concepts, such as breaking
complex systems into &amp;lsquo;bounded contexts&amp;rsquo;, and using &amp;lsquo;anti corruption layers&amp;rsquo; to
keep the domain model clean, but that was about it. It was only after starting
work on this post that I realised that DDD covers a huge landscape of software
development, including many low-level concepts that can be applied even within
small applications, such as board games!&lt;/p&gt;
&lt;p&gt;In this post I will focus on some of these low-level &amp;rsquo;tactical&amp;rsquo; aspects of DDD,
and implementing them in C#. Note that these low level details are only a small
part of DDD as originally described by Eric Evans in his now famous &lt;a href=&#34;https://www.goodreads.com/book/show/179133.Domain_Driven_Design&#34;&gt;&amp;lsquo;Blue
book&amp;rsquo;&lt;/a&gt;. See the
&lt;a href=&#34;#references&#34;&gt;references and further reading&lt;/a&gt; section at the end of this post for more
resources on DDD.&lt;/p&gt;
&lt;p&gt;A disclaimer before I go on: I haven&amp;rsquo;t read Eric Evans&amp;rsquo;s book. It has a
reputation for being long and boring, and I was keen to get started. Most of the
information in this post has come from various online sources, which are linked
throughout and at the end of this post.&lt;/p&gt;
&lt;h1 id=&#34;its-been-done&#34;&gt;It&amp;rsquo;s been done&lt;/h1&gt;
&lt;p&gt;A quick search revealed that someone else had already tried DDD on another board
game. In &lt;a href=&#34;https://dev.to/thomasferro/ddd-in-action-armadora-the-board-game-2o07&#34;&gt;DDD in action: Armadora - The board
game&lt;/a&gt;,
Thomas Ferro describes how he implemented a simple board game using DDD concepts
and event sourcing. This post, accompanied by &lt;a href=&#34;https://dev.to/thomasferro/summary-of-a-four-days-ddd-training-5a3c&#34;&gt;Summary of a four days DDD
training&lt;/a&gt;
were just the crash course I needed to see how the concepts could be applied for
someone new to DDD. However, the simplicity of the Armadora game left me
wondering how more complex games like pandemic would be implemented.&lt;/p&gt;
&lt;p&gt;I also found what looks to be a &lt;a href=&#34;https://github.com/alexzherdev/pandemic&#34;&gt;complete implementation of
Pandemic&lt;/a&gt;, using React &amp;amp; Redux. You can
&lt;a href=&#34;https://epidemic.netlify.app&#34;&gt;play it online here&lt;/a&gt;. Have a go, it&amp;rsquo;s really
well done! I don&amp;rsquo;t think DDD was an influence on this implementation, however it
was useful to have as a reference.&lt;/p&gt;
&lt;h1 id=&#34;applying-ddd-tactics-to-pandemic&#34;&gt;Applying DDD tactics to Pandemic&lt;/h1&gt;
&lt;p&gt;My stumbling point in the past has been the complex game rules of Pandemic.
Certain player actions result in chain reactions of side effects. For example,
if you pick up an &amp;rsquo;epidemic&amp;rsquo; card, a series of events can occur, based on
certain conditions:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&#34;https://iamwoz.com/blog/20210924_learning_ddd/end_turn_with_epidemic_flow.png&#34;
  alt=&#34;&#34;
  width=&#34;773&#34;
  loading=&#34;lazy&#34; /&gt;
  &lt;figcaption&gt;Some game rules at the end of a player&#39;s turn&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The flowchart above does not even show all the game rules: there are checks for
game end, outbreaks can occur when cities are infected, event cards may be
played, and more!&lt;/p&gt;
&lt;p&gt;One way DDD attempts to simplify complex domains is by breaking down complex
processes such as the one above into sequences of &lt;a href=&#34;#domain_event&#34;&gt;domain events&lt;/a&gt;. A domain event represents any change to the system. Events
are emitted as a result of commands issued within the system. Using the above
flowchart as an example, the player issues the &amp;lsquo;do action&amp;rsquo; command. If it was
the player&amp;rsquo;s last action, then two &amp;lsquo;card drawn&amp;rsquo; events could be emitted. If
either of those cards were an epidemic card, then more epidemic events are
emitted.&lt;/p&gt;
&lt;h2 id=&#34;how-to-handle-events-that-trigger-other-events&#34;&gt;How to handle events that trigger other events&lt;/h2&gt;
&lt;p&gt;Breaking down the complex rules into small commands and events sounds like a
good way to keep the underlying software parts small and manageable. However,
I&amp;rsquo;m worried about managing and debugging the explosion of events that may occur.
Are events supposed to trigger other events in DDD?&lt;/p&gt;
&lt;p&gt;From what I&amp;rsquo;ve read so far, a domain model in DDD is made up of &lt;a href=&#34;#aggregate&#34;&gt;aggregates&lt;/a&gt;,
which are always internally consistent. Multiple aggregates are brought into a
consistent state asynchronously, by the publishing of domain events. So in
theory, an endless sequence of domain events could be emitted as multiple
aggregates react to events sent by other aggregates. Presumably this is an
undesirable condition to find your software in.
&lt;a href=&#34;https://dev.to/thomasferro/ddd-in-action-armadora-the-board-game-2o07&#34;&gt;Armadora&lt;/a&gt;
uses a single aggregate to represent the current state of the game, thus
removing the complication of keeping multiple aggregates in sync. Additionally,
events do not trigger any other events. Commands may emit multiple events, and
I found one example of a &lt;a href=&#34;https://github.com/ThomasFerro/armadora/blob/84db3e24a57aaccad72953ae3ab484f410663bec/server/game/command/pass_turn.go#L38&#34;&gt;command calling another command&lt;/a&gt;.
This is what I will do for now.&lt;/p&gt;
&lt;h2 id=&#34;lets_start&#34;&gt;Let&amp;rsquo;s just start&lt;/h2&gt;
&lt;p&gt;OK, I think I have got enough to start. I&amp;rsquo;ll figure out the rest as I go. To
start, I will use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;one aggregate to represent the current state of the game&lt;/li&gt;
&lt;li&gt;immutable data, including aggregates and entities. This does not follow DDD,
but will be useful for AI algorithms that will need to search and keep track
of many game states.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#event_sourcing&#34;&gt;event sourcing&lt;/a&gt;, mainly as I&amp;rsquo;ve never used it
before, and it appears to remove some of the hassle of state management, and
keep the code more functional (as in functional programming)&lt;/li&gt;
&lt;li&gt;C#, as I&amp;rsquo;m most familiar with it, and I would like to get more experience with
some of its newer functional capabilities (mainly records and pattern
matching)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My goal for now is to implement enough game rules to be able to play a game to
completion. I will pick the simplest rules to start with. Once that&amp;rsquo;s done, I
can start adding rules incrementally, until the whole game is implemented.&lt;/p&gt;
&lt;p&gt;Since an aggregate is responsible for maintaining its own consistency, I think I
need to implement all command handlers in the aggregate. I am a little worried
about how big the aggregate is going to be, but I think the process of breaking
down the rules into discrete commands and events will help keep the
corresponding code manageable.&lt;/p&gt;
&lt;h2 id=&#34;baby-steps&#34;&gt;Baby steps&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s my initial aggregate:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// My one aggregate - the state of the game&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;record&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PandemicGame&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Difficulty Difficulty { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;init&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Create the game aggregate from an event log&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; PandemicGame FromEvents(IEnumerable&amp;lt;IEvent&amp;gt; events) =&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        events.Aggregate(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PandemicGame(), Apply);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// This is the &amp;#39;set difficulty&amp;#39; command. Commands yield events.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Since I am using event sourcing, there is no need to mutate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// the aggregate within the commands. The current state of the&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// aggregate can be built on demand from the event log.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; IEnumerable&amp;lt;IEvent&amp;gt; SetDifficulty(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        List&amp;lt;IEvent&amp;gt; log, Difficulty difficulty)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DifficultySet(difficulty);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Modify the aggregate with an event. Returns an updated copy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// of the current aggregate.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; PandemicGame Apply(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        PandemicGame pandemicGame, IEvent @event)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; @event &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            DifficultySet d =&amp;gt; pandemicGame with {Difficulty = d.Difficulty},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _ =&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArgumentOutOfRangeException(nameof(@event), @event, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;first-complex-process&#34;&gt;First complex process&lt;/h2&gt;
&lt;p&gt;After a few hours of coding simple events, I have reached an interesting point.
I need to implement the sequence of events that occur when a player does their
last action. Here&amp;rsquo;s what my current &lt;code&gt;DriveOrFerryPlayer&lt;/code&gt; command looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; IEnumerable&amp;lt;IEvent&amp;gt; DriveOrFerryPlayer(List&amp;lt;IEvent&amp;gt; log, Role role, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; city)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (!Board.IsCity(city)) &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; InvalidActionException(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;Invalid city &amp;#39;{city}&amp;#39;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; state = FromEvents(log);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; player = state.PlayerByRole(role);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (!Board.IsAdjacent(player.Location, city))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; InvalidActionException(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;Invalid drive/ferry to non-adjacent city: {player.Location} to {city}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PlayerMoved(role, city);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// todo: handle when this was the player&amp;#39;s last action&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To make things easier, I won&amp;rsquo;t consider all the rules as shown in the earlier
flowchart. Here&amp;rsquo;s a simplified version:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&#34;https://iamwoz.com/blog/20210924_learning_ddd/end_turn_flow_simple.png&#34;
  alt=&#34;&#34;
  width=&#34;250&#34;
  loading=&#34;lazy&#34; /&gt;
  &lt;figcaption&gt;A simplified &#39;end of player turn&#39; flow&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I did a mini &lt;a href=&#34;#event_storming&#34;&gt;event storming&lt;/a&gt; to determine
commands and events involved in the above flowchart. There&amp;rsquo;s only one aggregate
(the game), so I&amp;rsquo;ve omitted it from the image. Commands with no human player
next to them are issued by the &amp;lsquo;game&amp;rsquo;.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&#34;https://iamwoz.com/blog/20210924_learning_ddd/end_turn_flow_simple_event_storm.png&#34;
  alt=&#34;&#34;
  width=&#34;492&#34;
  loading=&#34;lazy&#34; /&gt;
  &lt;figcaption&gt;Event storming a simple &#39;end of player turn&#39; flow.
  Commands are blue, events are orange.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Here&amp;rsquo;s the &lt;code&gt;DriveOrFerryPlayer&lt;/code&gt; command after adding the above events:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; IEnumerable&amp;lt;IEvent&amp;gt; DriveOrFerryPlayer(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    List&amp;lt;IEvent&amp;gt; log, Role role, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; city)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (!Board.IsCity(city))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; InvalidActionException(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;Invalid city &amp;#39;{city}&amp;#39;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; state = FromEvents(log);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; player = state.PlayerByRole(role);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (player.ActionsRemaining == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; GameRuleViolatedException(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;Action not allowed: Player {role} has no actions remaining&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (!Board.IsAdjacent(player.Location, city))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; InvalidActionException(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;Invalid drive/ferry to non-adjacent city: {player.Location} to {city}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PlayerMoved(role, city);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (player.ActionsRemaining == &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// todo: pick up cards from player draw pile here&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PlayerCardPickedUp(role, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PlayerCard(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Atlanta&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PlayerCardPickedUp(role, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PlayerCard(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Atlanta&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; @event &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; InfectCity(log))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; @event;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; @event &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; InfectCity(log))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; @event;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; IEnumerable&amp;lt;IEvent&amp;gt; InfectCity(List&amp;lt;IEvent&amp;gt; log)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; state = FromEvents(log);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; infectionCard = state.InfectionDrawPile.Last();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; InfectionCardDrawn(infectionCard.City);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CubeAddedToCity(infectionCard.City);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s not as bad as I thought it would be! I separated out the private
&lt;code&gt;InfectCity&lt;/code&gt; command for convenience. It&amp;rsquo;s not a command a player can issue, but
makes the &lt;code&gt;DriveOrFerryPlayer&lt;/code&gt; code easier to understand from a domain
perspective. The aggregate is getting large (200 lines so far), but all the code
seems to belong to it.&lt;/p&gt;
&lt;h1 id=&#34;moving-away-from-event-sourcing&#34;&gt;Moving away from event sourcing&lt;/h1&gt;
&lt;p&gt;I have decided to stop using event sourcing, mainly because it is making testing
difficult. I want to be able to set up a near-end game state to be able to
assert game ending scenarios. With my current implementation, the only way to
create a game aggregate is from an event log. Although this ensures the
aggregate is in a valid state, it makes setting up these test scenarios
laborious, and I will need to constantly tweak the test setup as I add more game
rules, to ensure that the events leading to the game-ending state are valid.&lt;/p&gt;
&lt;p&gt;Instead of rebuilding the game aggregate from the event log, I will make the
commands instance methods of the aggregate. This way, commands immediately have
access to the current game state. Having an event log is useful for debugging
purposes, so I will keep emitting events for all modifications of the game
state. Being able to create the game aggregate in an invalid state is a hazard,
but for my purposes is very handy for testing. I wonder if there&amp;rsquo;s a way to
disable the usage of dangerous constructors in production code? I&amp;rsquo;ll put that on
the &amp;rsquo;to do later&amp;rsquo; pile.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what I have come up with. There are many command and event handlers on
the aggregate, but they are all following an emerging pattern:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Command handlers are public methods on the aggregate. They take parameters&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// relevant to the command, and return a new game aggregate and a collection of&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// events that occurred as a result of the command.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; (PandemicGame, ICollection&amp;lt;IEvent&amp;gt;) Command(arg1, arg2, ...) {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Event handlers are private static methods (pure functions) that apply a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// single event to the given aggregate, returning a resultant aggregate.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; PandemicGame HandleEvent(PandemicGame game, IEvent @event) {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#39;Internal command handlers&amp;#39; are convenient ways to break down larger&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// commands, that involve many events and conditional logic.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; PandemicGame InternalCommand(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    PandemicGame currentState,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ICollection&amp;lt;IEvent&amp;gt; events) {}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s see it in action. This is the current state of my &lt;code&gt;DriveOrFerryPlayer&lt;/code&gt;
command handler, which needs to perform a number of actions when the player has
performed the last action for their turn:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; (PandemicGame, ICollection&amp;lt;IEvent&amp;gt;) DriveOrFerryPlayer(Role role, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; city)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (!Board.IsCity(city))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; InvalidActionException(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;Invalid city &amp;#39;{city}&amp;#39;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; player = PlayerByRole(role);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (player.ActionsRemaining == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; GameRuleViolatedException(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;Action not allowed: Player {role} has no actions remaining&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (!Board.IsAdjacent(player.Location, city))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; InvalidActionException(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;Invalid drive/ferry to non-adjacent city: {player.Location} to {city}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; (currentState, events) = ApplyEvents(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PlayerMoved(role, city));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (currentState.CurrentPlayer.ActionsRemaining == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        currentState = DoStuffAfterActions(currentState, events);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (currentState, events);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; PandemicGame DoStuffAfterActions(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    PandemicGame currentState,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ICollection&amp;lt;IEvent&amp;gt; events)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    currentState = PickUpCard(currentState, events);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    currentState = PickUpCard(currentState, events);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    currentState = InfectCity(currentState, events);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    currentState = InfectCity(currentState, events);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; currentState;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;DriveOrFerryPlayer&lt;/code&gt; is going to continue to grow as I add more game logic. I&amp;rsquo;m
a little worried about that. There are more DDD concepts that I may be able to
use here: &amp;lsquo;sagas&amp;rsquo; or &amp;lsquo;process managers&amp;rsquo;, and &amp;lsquo;services&amp;rsquo;. I don&amp;rsquo;t know if these
are appropriate, as I believe they are intended to coordinate behaviour between
aggregates. Since this post is getting rather long, I&amp;rsquo;ll leave this for later.&lt;/p&gt;
&lt;p&gt;I also don&amp;rsquo;t really like the difference in method signatures between the public
and private command handlers.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Side note: I&amp;rsquo;m glad I chose to use records with immutable collections for my
data types. Immutable collection methods return updated copies of the
collections, as does the &lt;code&gt;with&lt;/code&gt; expression for C# records. This makes it very
easy to create new states based on events. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; PandemicGame ApplyPlayerCardDiscarded(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PandemicGame game,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PlayerCardDiscarded discarded)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; discardedCard = game
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      .CurrentPlayer
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      .Hand
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      .Single(c =&amp;gt; c.City == discarded.City);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; game with
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Players = game
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          .Players
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          .Replace(game.CurrentPlayer, game.CurrentPlayer with
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              Hand = game
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                .CurrentPlayer
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                .Hand
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                .Remove(discardedCard)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;wrapping-up-this-post&#34;&gt;Wrapping up this post&lt;/h1&gt;
&lt;p&gt;Despite the above concerns, I am confident that I can incrementally add game
rules until I have a full game implementation. The biggest benefit I have got
from DDD so far is a way of breaking down the game rules into fine grained
commands and events that are easy to reason about and implement.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;appendix-ddd-concepts-used-in-this-post&#34;&gt;Appendix: DDD concepts used in this post&lt;/h1&gt;
&lt;h2 id=&#34;domain&#34;&gt;Domain&lt;/h2&gt;
&lt;p&gt;The domain is the problem to be solved, and its surrounding context. In my case,
the domain is the Pandemic board game. The people working in the domain should
have a shared understanding of the domain model. It should be described in
non-technical, jargon-free language that everyone can understand. This
&amp;lsquo;ubiquitous language&amp;rsquo; (another DDD term) should be used when discussing the
domain model. Since I&amp;rsquo;m the only one working in the domain, the Pandemic rule
book will be my domain expert, and I will use language within the rules when
naming the software objects I create to build the game.&lt;/p&gt;
&lt;h2 id=&#34;domain_event&#34;&gt;Domain event&lt;/h2&gt;
&lt;p&gt;A domain event can be any event of interest within the domain. An event is a
result of some action within the domain. For example, in Pandemic, when a player
moves from one city to another, this can be described as a &amp;lsquo;player moved&amp;rsquo; event.
The event contains information about what occurred, eg. which player moved, and
which cities they moved from and to.&lt;/p&gt;
&lt;h2 id=&#34;event_storming&#34;&gt;Event storming&lt;/h2&gt;
&lt;p&gt;Typically, event storming is a session where domain, product, and technical
experts come together to explore and model a domain, starting by brainstorming
events that can occur within the domain.&lt;/p&gt;
&lt;p&gt;In my case, these were little &amp;lsquo;pen &amp;amp; paper&amp;rsquo; sessions where I mapped out a
sequence of game events and subsequent side effects.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Event_storming&#34;&gt;Wikipedia: Event storming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;aggregate&#34;&gt;Aggregate&lt;/h2&gt;
&lt;p&gt;An aggregate is a collection of objects that can be treated as an individual
unit. An example could be an online shopping cart, which may contain multiple
products.&lt;/p&gt;
&lt;p&gt;More importantly, an aggregate forms a &amp;lsquo;consistency boundary&amp;rsquo;. The aggregate
ensures that it remains internally consistent. For example, if your domain
contains a rule that a + b = c, then a, b, and c should be within the same
aggregate. The aggregate is responsible for making sure that whenever a or b are
modified, c is updated.&lt;/p&gt;
&lt;p&gt;Aggregates process commands, which potentially modify their state. Domain events
can be emitted as a result of these commands. The rest of the domain can listen
for these events and respond to them accordingly, keeping the domain consistent
with as aggregates change.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dddcommunity.org/wp-content/uploads/files/pdf_articles/Vernon_2011_1.pdf&#34;&gt;Vaughn Vernon: modelling a single aggregate (pdf)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;event_sourcing&#34;&gt;Event sourcing&lt;/h2&gt;
&lt;p&gt;Not necessarily a part of DDD, however it can be a good fit. The idea is that
application state is stored in an append-only log of events. If the state of the
application at a point in time is needed, it can be built from the log of
events.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Pandemic_%28board_game%29&#34;&gt;Pandemic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ultraboardgames.com/pandemic/game-rules.php&#34;&gt;Pandemic rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;Wikipedia: DDD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.to/thomasferro/ddd-in-action-armadora-the-board-game-2o07&#34;&gt;DDD in action: Armadora - The board game&lt;/a&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ThomasFerro/armadora&#34;&gt;Armadora code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.to/thomasferro/summary-of-a-four-days-ddd-training-5a3c&#34;&gt;Thomas Fero: Summary of a four days DDD training&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://epidemic.netlify.app&#34;&gt;Epidemic&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;an online Pandemic clone, built with React &amp;amp; Redux&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alexzherdev/pandemic&#34;&gt;Epidemic source code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Event_storming&#34;&gt;Wikipedia: Event storming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;domain events
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/domain-events-design-implementation&#34;&gt;MSDN: Domain events: design and implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;aggregates
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dddcommunity.org/wp-content/uploads/files/pdf_articles/Vernon_2011_1.pdf&#34;&gt;Vaughn Vernon: modelling a single aggregate (pdf)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;further-reading--work&#34;&gt;Further reading / work&lt;/h1&gt;
&lt;p&gt;Some resources that I haven&amp;rsquo;t investigated much / at all:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The original DDD book (&amp;lsquo;The Blue Book&amp;rsquo;) by Eric Evans: &lt;a href=&#34;https://www.goodreads.com/book/show/179133.Domain_Driven_Design&#34;&gt;Domain-Driven
Design&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Comes highly recommended as the authoritative source for DDD, however has
a reputation for being overly verbose and boring.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Implementing-Domain-Driven-Design-Vaughn-Vernon/dp/0321834577&#34;&gt;Implementing Domain Driven Design - Vaughn
Vernon&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Apparently a shorter and more practical book than the original&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boardgame.io/&#34;&gt;boardgame.io&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;a turn-based game framework where users provide their game object &amp;amp;
commands, which could be considered a DDD aggregate &amp;amp; commands.&lt;/li&gt;
&lt;li&gt;the framework provides a &lt;code&gt;ctx&lt;/code&gt; object which contains extra data about the
game. It gets updated via events emitted by commands, much like in DDD.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>My first chess bot</title>
      <link>https://iamwoz.com/blog/20210916_my_first_chess_bot/</link>
      <pubDate>Thu, 16 Sep 2021 21:57:19 +1000</pubDate>
      
      <guid>https://iamwoz.com/blog/20210916_my_first_chess_bot/</guid>
      <description>&lt;p&gt;In my spare time, I&amp;rsquo;ve been slowly learning about reinforcement learning. I came
upon &lt;a href=&#34;https://healeycodes.com/building-my-own-chess-engine/&#34;&gt;this post&lt;/a&gt; by
Andrew Healey about making a chess engine, and thought &amp;ldquo;I know all about AI,
I&amp;rsquo;ll make a bot that beats his!&amp;rdquo;. Read on to see how that went.&lt;/p&gt;
&lt;h1 id=&#34;step-one-andoma-vs-random-bot&#34;&gt;Step one: Andoma vs. random bot&lt;/h1&gt;
&lt;p&gt;Andrew&amp;rsquo;s chess engine is called Andoma. See the code here: &lt;a href=&#34;https://github.com/healeycodes/andoma&#34;&gt;Andoma&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To get a better understanding of how to use Andoma, I made a random bot that it
could play against. This way, I could quickly see how Andoma performs against
a rubbish opponent. As expected, Andoma wins every game.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;andoma_vs_random&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    board &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chess&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Board()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;move&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; random_move(board) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; board&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;turn &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; chess&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;WHITE &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; andoma_move(board)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; board&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_game_over():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        board&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;push(move())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Random [W] vs Andoma [b]:&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(board)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Result: [W] &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;board&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;result()&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; [b]&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;andoma_move&lt;/span&gt;(board: chess&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Board) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; chess&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Move:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; next_move(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, board, debug&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;random_move&lt;/span&gt;(board: chess&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Board) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; chess&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Move:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    legal_moves &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(board&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legal_moves)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;choice(legal_moves)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The result:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Random &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; vs Andoma &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;r . . . . r k .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p p p . . p p p
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;. . p . . . . .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;. . b . . . . .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;. . . . . . . .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;. . . n p . . .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;. . . q . . . P
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;. . . K . . . R
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Result: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; 0-1 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;See &lt;a href=&#34;#notation&#34;&gt;notation&lt;/a&gt; to understand the output.&lt;/p&gt;
&lt;h1 id=&#34;step-two-make-a-random-bot-with-openspiel&#34;&gt;Step two: make a random bot with OpenSpiel&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;ve been playing with &lt;a href=&#34;https://github.com/deepmind/open_spiel&#34;&gt;OpenSpiel&lt;/a&gt;,
which comes with a bunch of algorithms and environments. It&amp;rsquo;s got an algorithm I
want to use to fight Andoma, but my first baby step is to just make a simple
bot. OpenSpiel comes with a chess implementation and a generic random bot. All
games/environments share a common interface, so it&amp;rsquo;s simply a matter of hooking
up the pieces:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;game &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pyspiel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load_game(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chess&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;player_1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uniform_random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;UniformRandomBot(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RandomState())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;player_2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uniform_random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;UniformRandomBot(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RandomState())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;players &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [player_1, player_2]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; game&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new_initial_state()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_terminal():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  current_player_idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;current_player()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  current_player &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; players[current_player_idx]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  action &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; current_player&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;step(state)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply_action(action)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you&amp;rsquo;re interested in using OpenSpiel, my &lt;a href=&#34;https://github.com/uozuAho/open_spiel_playground&#34;&gt;OpenSpiel playground&lt;/a&gt;
can get you up and running with relative ease. OpenSpiel&amp;rsquo;s &lt;a href=&#34;https://github.com/deepmind/open_spiel/blob/master/docs/intro.md&#34;&gt;documentation&lt;/a&gt;
is enough to cobble bits together, but you may end up needing to read some of
the source code for specifics.&lt;/p&gt;
&lt;h1 id=&#34;step-3-mcts&#34;&gt;Step 3: MCTS&lt;/h1&gt;
&lt;p&gt;Time for a stronger opponent. Now that I&amp;rsquo;ve got OpenSpiel set up, I want to try
its &lt;a href=&#34;https://en.wikipedia.org/wiki/Monte_Carlo_tree_search&#34;&gt;Monte Carlo Tree Search&lt;/a&gt;
(MCTS) algorithm.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve recently learned about MCTS. It&amp;rsquo;s more of a planning algorithm than a
learning algorithm, but can be coupled with learning algorithms to make it more
effective. This is the approach used by the various &lt;a href=&#34;https://en.wikipedia.org/wiki/AlphaGo_Zero&#34;&gt;Alpha*&lt;/a&gt;
agents, one of which famously &lt;a href=&#34;https://en.wikipedia.org/wiki/AlphaGo_versus_Lee_Sedol&#34;&gt;beat world champion Lee Sedol in a Go match&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;MCTS is somewhat similar to alpha-beta pruning (which Andoma uses), in that it
explores a number of game trajectories from the current game state, and picks
the most promising move based on the outcomes of those trajectories. The
difference is that while Andoma only explores a few moves in advance, MCTS plays
multiple games to completion from the current state (this is actually not the
case for AlphaGo, but that&amp;rsquo;s beyond the scope of this post). The average outcome
of games played from that state determines how &amp;lsquo;promising&amp;rsquo; a state it is. For
example, if you see 10 wins and 10 losses from one game state, but 18 wins and 2
losses from another state, then the latter state is more promising.&lt;/p&gt;
&lt;p&gt;An advantage of this approach is that MCTS does not need any evaluation of
intermediate game states or moves like Andoma does. MCTS only cares about the
outcomes of completed games. In fact, a simple MCTS implementation can make
random moves to simulate games from the current state. This is the default
approach for the MCTS algorithm in OpenSpiel.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&#34;https://iamwoz.com/blog/20210916_my_first_chess_bot/alpha-beta-pruning.png&#34;
    alt=&#34;alpha-beta pruning in progress - low value branches are abandoned&#34;
    width=&#34;1024&#34;
    loding=&#34;lazy&#34; /&gt;
  &lt;figcaption&gt;Alpha-beta pruning. Lower scores are better. Branches that cannot
  achieve the low scores of other branches are abandoned.
  &lt;a href=&#34;https://commons.wikimedia.org/wiki/File:AB_pruning.svg&#34;&gt;Original image&lt;/a&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
  &lt;img src=&#34;https://iamwoz.com/blog/20210916_my_first_chess_bot/MCTS_rollout.png&#34;
    alt=&#34;outcomes of multiple game playthroughs, represented as a graph of game states&#34;
    width=&#34;684&#34;
    loding=&#34;lazy&#34; /&gt;
  &lt;figcaption&gt;A representation of MCTS &#39;rollout&#39;. After playing a number of
  games from the current state, branch B looks the most promising.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The above images show that MCTS is more akin to depth-first search, while
alpha-beta pruning is breadth-first.&lt;/p&gt;
&lt;p&gt;To create a generic MCTS bot with OpenSpiel:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mcts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;MCTSBot(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    game,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    uct_c&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sqrt(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    max_simulations&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    evaluator&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mcts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RandomRolloutEvaluator(n_rollouts&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;off-to-a-good-start&#34;&gt;Off to a good start&lt;/h1&gt;
&lt;p&gt;I wrapped Andoma in an OpenSpiel bot interface (see below). It took a bit of
learning about chess notation to map &lt;a href=&#34;https://pypi.org/project/chess/&#34;&gt;pychess&lt;/a&gt;&amp;rsquo;s
moves to the valid moves presented by OpenSpiel&amp;rsquo;s chess implementation. See the
&lt;a href=&#34;#notation&#34;&gt;appendix&lt;/a&gt; for the notation used in this post. You can
see the full code from my
&lt;a href=&#34;https://github.com/uozuAho/open_spiel_playground/blob/fc8903bb71a237150bf6742a24a513ab7b1f02ff/chess/bot_vs_bot.py#L22&#34;&gt;bot_vs_bot.py script&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AndomaBot&lt;/span&gt;(pyspiel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Bot):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, search_depth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pyspiel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Bot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__init__(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search_depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; search_depth
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;step&lt;/span&gt;(self, state: pyspiel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;State) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    board &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chess&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Board(str(state))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    move &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; movegeneration&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_move(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search_depth, board, debug&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_pychess_to_spiel_move(move, state)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_pychess_to_spiel_move&lt;/span&gt;(self, move: chess&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Move, state: pyspiel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;State):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# This is necessary, as openspiel&amp;#39;s chess move notation sometimes differs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# from pychess&amp;#39;s. Details omitted for brevity.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With that thin wrapper, I had the MCTS and Andoma bots fighting! My MCTS bot was
winning every game, even when Andoma&amp;rsquo;s search depth was set to 3 (slow!), and
MCTS only doing 2 full game simulations per move. After the few seconds of
elation at being an instant master game AI programmer, I figured I&amp;rsquo;d made a
mistake somewhere.&lt;/p&gt;
&lt;h1 id=&#34;oops&#34;&gt;Oops&lt;/h1&gt;
&lt;p&gt;Here was my problem:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;player_label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mcts&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;andoma&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;winner &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; player_label[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; winner_idx &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; player_label[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Derp. Happens to the best of us.&lt;/p&gt;
&lt;p&gt;With that fixed, I found that Andoma was winning every game, even when its
search depth was set to 1, and MCTS was doing 10 full game simulations, each
with 10 rollouts per search node. Each game was taking about a minute to run at
these settings, so I gave up there. This result makes more sense. Even though
MCTS is simulating many games, the simulated moves are random, which is hardly
an effective strategy for playing chess. Andoma encodes a lot of knowledge about
chess, thus is able to make moves that are much better than random moves!&lt;/p&gt;
&lt;p&gt;Even when playing against a random bot, MCTS didn&amp;rsquo;t win all its games. It had a
decent win rate once the number of simulations and rollouts were &amp;gt; 6, but these
games were taking close to a minute to run. I won&amp;rsquo;t be entering my chess bot in
any speed chess competitions soon. For comparison, Andoma wins every game
against a random opponent, even at a search depth of 1, which takes at most a
few seconds to run.&lt;/p&gt;
&lt;h1 id=&#34;an-experiment-mcts-with-andoma-rollout&#34;&gt;An experiment: MCTS with Andoma rollout&lt;/h1&gt;
&lt;p&gt;Rather than simulating games by making random moves, what about using Andoma&amp;rsquo;s
move evaluation to greedily pick the &amp;lsquo;best&amp;rsquo; move at each game state? This was
easy to try, as the OpenSpiel MCTS implementation allows for easy swapping of
&amp;rsquo;evaluator&amp;rsquo; implementations (one being the neural network used by AlphaGo). I
plugged in this evaluator:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AndomaValuesRolloutEvaluator&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;evaluate&lt;/span&gt;(self, state):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34; &amp;#39;Rolls out&amp;#39; a complete game, returning the outcome.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        There&amp;#39;s no need for multiple rollouts, since Andoma&amp;#39;s
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        move choice is deterministic.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    working_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clone()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; working_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_terminal():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      action &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_best_action(working_state)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      working_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply_action(action)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array(working_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;returns())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_best_action&lt;/span&gt;(self, state: pyspiel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;State) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    board &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chess&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Board(str(state))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# return the &amp;#39;best&amp;#39; move decided by Andoma&amp;#39;s move ordering&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    move &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_ordered_moves(board)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_pychess_to_spiel_move(move, state)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Coupled with this evaluator, MCTS was able to beat a random bot more often.
However, its performance (execution time) was pretty hopeless. A quick look at
the profiler results (&lt;code&gt;python -m cProfile -s time my_slow_program.py&lt;/code&gt; FTW!)
showed that the translation of moves between OpenSpiel and pychess was taking up
a lot of time. I decided that this was a good place to stop - my main interest
was in creating a bot that could play chess with zero knowledge (outside of the
game rules), and this experiment was just for curiosity&amp;rsquo;s sake.&lt;/p&gt;
&lt;h1 id=&#34;what-next&#34;&gt;What next?&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;ve just finished part one of &lt;a href=&#34;https://www.goodreads.com/book/show/739791.Reinforcement_Learning&#34;&gt;Reinforcement Learning: An Introduction&lt;/a&gt;,
which is all about &amp;rsquo;tabular&amp;rsquo; methods. These are algorithms that learn by storing
all observed states and estimating each state&amp;rsquo;s value through many playthroughs
of the game. These methods are impractical for chess, which apparently has more
possible game states than there are atoms in the universe!&lt;/p&gt;
&lt;p&gt;Part two of the book covers approximation strategies, which are essentially
mandatory for anything but trivially small AI problems like tic-tac-toe. My plan
is to read this, then come back with a vengeance.&lt;/p&gt;
&lt;h1 id=&#34;notation&#34;&gt;Appendix: chess notation&lt;/h1&gt;
&lt;p&gt;I had to learn a bunch of chess notation to be able to build these bots. Here&amp;rsquo;s
what I learned.&lt;/p&gt;
&lt;h2 id=&#34;chess-pieces&#34;&gt;Chess pieces&lt;/h2&gt;
&lt;p&gt;The notation systems here use the following characters to denote chess pieces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;k = king&lt;/li&gt;
&lt;li&gt;q = queen&lt;/li&gt;
&lt;li&gt;r = rook&lt;/li&gt;
&lt;li&gt;n = knight&lt;/li&gt;
&lt;li&gt;b = bishop&lt;/li&gt;
&lt;li&gt;p = pawn&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lowercase letters are black pieces, uppercase are white.&lt;/p&gt;
&lt;h2 id=&#34;forsyth-edwards-notation-fen&#34;&gt;Forsyth-Edwards Notation (FEN)&lt;/h2&gt;
&lt;p&gt;FEN describes the current state of a chess game with a line of characters.
There&amp;rsquo;s plenty of descriptions of FEN on the internet. If you want more details,
&lt;a href=&#34;https://www.chess.com/terms/fen-chess&#34;&gt;here&amp;rsquo;s one&lt;/a&gt;. Here&amp;rsquo;s my crash course.&lt;/p&gt;
&lt;p&gt;A FEN string looks like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rnbqk1nr/p1ppppbp/1p4p1/8/2P5/2Q5/PP1PPPPP/RNB1KBNR b KQkq - 0 1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The first chunk of characters describes the position of the chess pieces. The
above string translates to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;r n b q k . n r
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p . p p p p b p
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;. p . . . . p .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;. . . . . . . .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;. . P . . . . .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;. . Q . . . . .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;P P . P P P P P
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;R N B . K B N R
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The characters after the piece positions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt;: it is currently black&amp;rsquo;s turn to move (w for white&amp;rsquo;s move)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;KQkq&lt;/code&gt;: castling rights&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-&lt;/code&gt;: &amp;ldquo;En passant targets&amp;rdquo;. I don&amp;rsquo;t really know what this means, but it didn&amp;rsquo;t
get in the way of making my chess bots.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;: halfmove clock: number of moves since a pawn move or a capture. Can call
the game a draw if this clock reaches 100&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt;: fullmove counter: increments by one after each black move&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rnbqk1nr/p1ppppbp/1p4p1/8/2P5/2Q5/PP1PPPPP/RNB1KBNR b KQkq - &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;───────────┬───────────   ────────────┬──────────── ▲ ──┬─ ▲ ▲ ▲
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           │                          │             │   │  │ │ └─fullmove counter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           │                          │             │   │  │ │
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           │                          │             │   │  │ └───halfmove clock
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           │                          │             │   │  │
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           │                          │             │   │  └─────en passant targets
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           │                          │             │   │
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           │                          │             │   └────────castling rights, white, black
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           │                          │             │
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           │                          │             └────────────black&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;s move
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           │                          │
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           │                          └──────────────────────────white pieces are uppercase
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           │
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           └─────────────────────────────────────────────────────black pieces are lowercase
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;move-notation&#34;&gt;Move notation&lt;/h2&gt;
&lt;p&gt;FEN only describes the current game state, not moves that occur within the game.
There are multiple notations, but &lt;a href=&#34;https://en.wikipedia.org/wiki/Algebraic_notation_(chess)&#34;&gt;algebraic notation&lt;/a&gt;
seems to be pretty common.&lt;/p&gt;
&lt;h3 id=&#34;rank--file&#34;&gt;Rank &amp;amp; file&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;rank = row&lt;/li&gt;
&lt;li&gt;file = column&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rank
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   v
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;   r n b q k . n r
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;   p . p p p p b p
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;   . p . . . . p .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;   . . . . . . . .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;   . . P . . . . .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;   . . Q . . . . .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   P P . P P P P P
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;   R N B . K B N R
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       a b c d e f g h   &amp;lt;-- file
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;moves&#34;&gt;Moves&lt;/h3&gt;
&lt;p&gt;Moves are denoted by the letter specifying the piece, and the board position it
moves to. Pawn moves don&amp;rsquo;t use a letter specifier. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Nf3&lt;/code&gt;: white knight to &lt;code&gt;f3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a3&lt;/code&gt;:  (in the board above): white pawn to &lt;code&gt;a3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that without knowledge of the current game state, there is ambiguity in
this move notation: for example, &amp;lsquo;a3&amp;rsquo; could mean different moves, depending on
the current game state.&lt;/p&gt;
&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://healeycodes.com/building-my-own-chess-engine/&#34;&gt;Andrew Healey: Building My Own Chess Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python chess implementation: &lt;a href=&#34;https://pypi.org/project/chess/&#34;&gt;chess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.chess.com/terms/fen-chess&#34;&gt;Forsyth-Edwards Notation (FEN)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/deepmind/open_spiel&#34;&gt;OpenSpiel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;My &lt;a href=&#34;https://github.com/uozuAho/open_spiel_playground&#34;&gt;OpenSpiel playground&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;My &lt;a href=&#34;https://github.com/uozuAho/open_spiel_playground/blob/fc8903bb71a237150bf6742a24a513ab7b1f02ff/chess/bot_vs_bot.py#L22&#34;&gt;chess bot battle ground&lt;/a&gt;,
at the time of writing this post.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Monte_Carlo_tree_search&#34;&gt;Monte Carlo Tree Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/book/show/739791.Reinforcement_Learning&#34;&gt;Reinforcement Learning: An Introduction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>A new mouse trap - the tub</title>
      <link>https://iamwoz.com/blog/20210829_mouse2/</link>
      <pubDate>Sun, 29 Aug 2021 11:00:00 +1100</pubDate>
      
      <guid>https://iamwoz.com/blog/20210829_mouse2/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been a while since I set up my elaborate set of mouse traps, barriers and
surveillance. See &lt;a href=&#34;https://iamwoz.com/blog/20210613_mouse/&#34;&gt;this post&lt;/a&gt;. Everything has
been in place since then, and I enjoyed a few mouse-free weeks after catching
the first 3 mice. However, at least one mouse came back, and was wise enough to
avoid the existing traps, no matter what bait I used. I tried peanut butter,
cheese, bread, bird seed, vegemite and honey. It was time for a new trap.&lt;/p&gt;
&lt;h1 id=&#34;the-new-trap&#34;&gt;The new trap&lt;/h1&gt;
&lt;p&gt;There are plenty of ideas out there on how to build a DIY mouse trap. For
example, here&amp;rsquo;s a big list of &lt;a href=&#34;https://www.itsoverflowing.com/homemade-mouse-trap-diy/&#34;&gt;DIY mouse traps&lt;/a&gt;.
A lot of them follow a similar concept: the mouse gets lured into/onto an
unstable platform over a large container. The weight of the mouse is enough to
make the platform or just the mouse fall into the container. Here&amp;rsquo;s my version,
using bits I had around the house:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://iamwoz.com/blog/20210829_mouse2/20210829_102835.jpg&#34;
alt=&#34;&#34;
width=&#34;530&#34;
loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s peanut butter and cheese on top of the empty toilet roll. If all goes to
plan, the mouse should lose its footing on the roll, and fall into the tub.&lt;/p&gt;
&lt;p&gt;At first, it looked as if the mouse was well aware that this was a
human-constructed trap, and kept its distance. Over the next couple of days,
lured by little bits of cheese I put on the ramp, the mouse got more
adventurous:&lt;/p&gt;
&lt;video width=&#34;600&#34; height=&#34;400&#34; controls loading=&#34;lazy&#34;&gt;
   &lt;source src=&#34;https://iamwoz.com/blog/20210829_mouse2/snooping_around_tub.mp4&#34; type=&#34;video/mp4&#34; /&gt;
   Sorry, your browser doesn&#39;t support embedded videos.
&lt;/video&gt;
&lt;p&gt;It looked as though again, the mouse was too smart for me.&lt;/p&gt;
&lt;h1 id=&#34;a-critical-error&#34;&gt;A critical error&lt;/h1&gt;
&lt;p&gt;The mouse was confidently strutting around the top of the tub, and carefully
examining the food in the middle of the trap from a distance. I thought I was
going to have to go back to the drawing board. But then, one morning, I heard
some noises coming from the tub&amp;hellip;&lt;/p&gt;
&lt;video width=&#34;600&#34; height=&#34;400&#34; controls loading=&#34;lazy&#34;&gt;
   &lt;source src=&#34;https://iamwoz.com/blog/20210829_mouse2/mouse_in_tub.mp4&#34; type=&#34;video/mp4&#34; /&gt;
   Sorry, your browser doesn&#39;t support embedded videos.
&lt;/video&gt;
&lt;p&gt;I had beaten the mouse! I reviewed the night&amp;rsquo;s footage to see that little mousey
had made a critical misstep, and its dreams of spending its retirement in my
house were over.&lt;/p&gt;
&lt;video width=&#34;600&#34; height=&#34;400&#34; controls loading=&#34;lazy&#34;&gt;
   &lt;source src=&#34;https://iamwoz.com/blog/20210829_mouse2/mouse_tub_fall.mp4&#34; type=&#34;video/mp4&#34; /&gt;
   Sorry, your browser doesn&#39;t support embedded videos.
&lt;/video&gt;
</description>
    </item>
    
    <item>
      <title>Automated visual testing with Percy</title>
      <link>https://iamwoz.com/blog/20210618_percy/</link>
      <pubDate>Fri, 18 Jun 2021 23:33:40 +1000</pubDate>
      
      <guid>https://iamwoz.com/blog/20210618_percy/</guid>
      <description>&lt;p&gt;I shared my &lt;a href=&#34;https://iamwoz.com/blog/20210613_mouse/&#34;&gt;last post&lt;/a&gt; with some friends, and
soon found out that the images and videos didn&amp;rsquo;t load on Safari. What better
time than to introduce an overly complicated automated testing process to catch
these problems in the future!&lt;/p&gt;
&lt;p&gt;I first checked my site in &lt;a href=&#34;https://www.browserstack.com/&#34;&gt;BrowserStack&lt;/a&gt;. Sure
enough, it didn&amp;rsquo;t display correctly on any iPhones or Safari on MacOS.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d heard of &lt;a href=&#34;https://percy.io/&#34;&gt;Percy&lt;/a&gt; before, but never used it. It takes
snapshots of your site, and provides a visual tool for comparing differences as
you make changes. Seems like a good way to make sure I don&amp;rsquo;t break the site as
I inevitably try out new stuff.&lt;/p&gt;
&lt;h1 id=&#34;running-percy-locally&#34;&gt;Running Percy locally&lt;/h1&gt;
&lt;h2 id=&#34;using-webdriverio&#34;&gt;Using WebdriverIO&lt;/h2&gt;
&lt;p&gt;Percy is just a visual comparison tool, not a testing framework. It supports
many frameworks, including &lt;a href=&#34;https://webdriver.io/&#34;&gt;WebdriverIO&lt;/a&gt; which I&amp;rsquo;m
familiar with, so let&amp;rsquo;s start with that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# initialise npm in my blog project (nooo! I didn&amp;#39;t think it would happen so soon :( )&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# add webdriver&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm install @wdio/cli
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npx wdio init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# modify package.json to make the test script = wdio ./wdio.conf.js&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# check it works:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm test
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All good. Now replace the example test &lt;code&gt;wdio&lt;/code&gt; created with just opening a few
pages on my site running locally:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;baseUrl&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://localhost:1313&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;click&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;selector&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;selector&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;waitForDisplayed&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;click&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;describe&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;stuff&amp;#39;&lt;/span&gt;, () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;it&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;goto homepage&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;browser&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;baseUrl&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;it&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;goto blog&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;browser&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;baseUrl&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;click&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=Blog&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In one terminal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo server
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In another terminal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm test
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;OK. This should be enough to take a couple of snapshots with Percy. Install it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm i @percy/cli @percy/webdriverio
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Add a &lt;code&gt;percySnapshot&lt;/code&gt; at the end of each test, then run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export PERCY_TOKEN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;my_secret_token
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npx percy exec -- wdio ./wdio.conf.js
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All my pages are new at this point, so there&amp;rsquo;s no changes to compare:&lt;/p&gt;
&lt;p&gt;&lt;img
src=&#34;https://iamwoz.com/blog/20210618_percy/new_snapshot.png&#34;
alt=&#34;example of a new snapshot display on Percy&#39;s UI&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;using-percy-cli&#34;&gt;Using Percy CLI&lt;/h2&gt;
&lt;p&gt;As usual, after setting up a complicated way to do something, I discovered that
there&amp;rsquo;s an easier process. For static sites like this one, the
&lt;a href=&#34;https://docs.percy.io/docs/snapshot-cli-command&#34;&gt;Percy CLI&lt;/a&gt; can take snapshots
of all published content. Let&amp;rsquo;s try that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# publish everything&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# snapshot all html files, and send to percy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npx percy snapshot public/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is much easier than using webdriver! In the bin!&lt;/p&gt;
&lt;p&gt;Also, I&amp;rsquo;ve just realised that the only browsers currently supported by Percy are
Chrome, Edge and Firefox. Derp. So much for using it to detect problems on
Safari. Ah well, I&amp;rsquo;ve come this far, and it may still come in handy. Let&amp;rsquo;s get
it running in GitHub instead of locally. Add the Percy token to the GitHub repo:
Go to the repo, then: settings -&amp;gt; secrets -&amp;gt; new secret.&lt;/p&gt;
&lt;p&gt;Then, create an action in &lt;code&gt;.github/workflows&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Percy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;on&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;push]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;jobs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;snapshot&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;runs-on&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ubuntu-latest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/checkout@v2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;get Node.js&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/setup-node@v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;node-version&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;12.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;npm ci&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# don&amp;#39;t need to do a hugo build here - I do that locally, for now at least&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;npx percy snapshot public/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;PERCY_TOKEN&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${{ secrets.PERCY_TOKEN }}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Push the changes. If all&amp;rsquo;s gone well, the action will upload the site&amp;rsquo;s
snapshots to Percy, where changes can be reviewed:&lt;/p&gt;
&lt;p&gt;&lt;img
src=&#34;https://iamwoz.com/blog/20210618_percy/compare_page_versions.png&#34;
alt=&#34;example of comparing two versions of a page in Percy&#39;s UI&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The Percy UI shows a list of pages, with visual changes highlighted in red. You
can toggle the highlighting on/off with the &amp;rsquo;d&amp;rsquo; key, which makes finding and
comparing changes easy.&lt;/p&gt;
&lt;h1 id=&#34;next-steps&#34;&gt;Next steps&lt;/h1&gt;
&lt;p&gt;OK. I&amp;rsquo;m tired, and as usual, have learned a bunch of stuff without solving my
original problem. Time to actually fix things for Safari :) I&amp;rsquo;ll just manually
test things in BrowserStack for now.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s possible to set up easy navigation to/from Percy from PRs on GitHub. This
means PRs will show the Percy review status, which presumably goes green when I
approve all the changes. I can&amp;rsquo;t be bothered setting that up right now, but
the docs for setting that up are at
&lt;a href=&#34;https://docs.percy.io/docs/source-code-integrations&#34;&gt;Percy docs: source code integrations&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;epilogue---why-wasnt-safari-showing-images-and-videos&#34;&gt;Epilogue - why wasn&amp;rsquo;t Safari showing images and videos?&lt;/h1&gt;
&lt;p&gt;It looks like only very recent versions of Safari support &lt;code&gt;webp&lt;/code&gt; and &lt;code&gt;webm&lt;/code&gt;
formats, which I was using. I&amp;rsquo;ve since converted them to &lt;code&gt;jpg&lt;/code&gt; and
&lt;code&gt;mp4 (with h264 video)&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.percy.io/docs/getting-started&#34;&gt;Percy: Getting started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.percy.io/docs/webdriverio&#34;&gt;Percy: WebdriverIO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/uozuAho/blog&#34;&gt;source code for this blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Of mice and men - my battle with house mice</title>
      <link>https://iamwoz.com/blog/20210613_mouse/</link>
      <pubDate>Sun, 13 Jun 2021 14:48:00 +1100</pubDate>
      
      <guid>https://iamwoz.com/blog/20210613_mouse/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been playing a game of human and mouse recently. A couple of weeks ago,
as I was walking into the kitchen, I spotted a mouse darting under the fridge.
My first thought was to create an elaborate security camera system to find out
where they go in the house.&lt;/p&gt;
&lt;h1 id=&#34;the-setup&#34;&gt;The setup&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;d been meaning to put together a camera system that makes it easy to observe
plants &amp;amp; animals etc., so this was all the motivation I needed.&lt;/p&gt;
&lt;p&gt;You can find all the technical details in &lt;a href=&#34;https://github.com/uozuAho/pi_cam_v1&#34;&gt;this repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I already had most of the parts I needed to make the camera - a raspberry pi
zero, night vision camera, infrared (IR) spotlight, flexible tripod, and of
course, Blu Tack, rubber bands and determination. Here&amp;rsquo;s the camera and
spotlight:&lt;/p&gt;
&lt;p&gt;&lt;img
src=&#34;https://iamwoz.com/blog/20210613_mouse/camera_front.jpg&#34;
alt=&#34;front of the camera on a tripod&#34;
width=&#34;352&#34;
loading=&#34;lazy&#34; /&gt;
&lt;img
src=&#34;https://iamwoz.com/blog/20210613_mouse/camera_back.jpg&#34;
alt=&#34;back of the camera on a tripod&#34;
width=&#34;366&#34;
loading=&#34;lazy&#34; /&gt;
&lt;img
src=&#34;https://iamwoz.com/blog/20210613_mouse/ir_spotlight.jpg&#34;
alt=&#34;IR spotlight&#34;
width=&#34;409&#34;
loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;day-0---the-stakeout&#34;&gt;Day 0 - the stakeout&lt;/h1&gt;
&lt;p&gt;Each evening, I set up the camera in the spot I wanted to monitor, and set it
recording. Each morning, I scanned the recorded videos for motion using a handy
tool called &lt;a href=&#34;https://dvr-scan.readthedocs.io/en/latest/&#34;&gt;dvr-scan&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;day-1---theyre-on-the-kitchen-bench&#34;&gt;Day 1 - they&amp;rsquo;re on the kitchen bench&lt;/h1&gt;
&lt;p&gt;They&amp;rsquo;re all over the kitchen bench, eww! How did they get there? They climbed
the network cable! Exhibit A:&lt;/p&gt;
&lt;video width=&#34;400&#34; height=&#34;300&#34; controls loading=&#34;lazy&#34;&gt;
   &lt;source src=&#34;https://iamwoz.com/blog/20210613_mouse/mousefall.mp4&#34; type=&#34;video/mp4&#34; /&gt;
   Sorry, your browser doesn&#39;t support embedded videos.
&lt;/video&gt;
&lt;p&gt;Look at it go!&lt;/p&gt;
&lt;p&gt;They also jump! Apparently their eyesight isn&amp;rsquo;t that great, so good effort here,
for not much reward (apart from the funny video):&lt;/p&gt;
&lt;video width=&#34;400&#34; height=&#34;300&#34; controls loading=&#34;lazy&#34;&gt;
   &lt;source src=&#34;https://iamwoz.com/blog/20210613_mouse/jump.mp4&#34; type=&#34;video/mp4&#34; /&gt;
   Sorry, your browser doesn&#39;t support embedded videos.
&lt;/video&gt;
&lt;h2 id=&#34;the-cable-guard&#34;&gt;The cable guard&lt;/h2&gt;
&lt;p&gt;To stop them climbing the cable, I made a cable guard based on the plastic rings
I&amp;rsquo;ve seen around some power lines. I assume those are to stop possums. My guard
is made from high quality materials: cardboard, sticky tape and Blu Tack.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://iamwoz.com/blog/20210613_mouse/cable_mouse_barrier_top.jpg&#34;
alt=&#34;cable barrier, from the top&#34;
width=&#34;366&#34;
loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://iamwoz.com/blog/20210613_mouse/cable_mouse_barrier_bottom.jpg&#34;
alt=&#34;cable barrier, from underneath&#34;
width=&#34;481&#34;
loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;day-2---theyre-still-on-the-kitchen-bench&#34;&gt;Day 2 - they&amp;rsquo;re still on the kitchen bench&lt;/h1&gt;
&lt;p&gt;D&amp;rsquo;oh. The first cable guard I made was too small. It stopped them for a while,
but they outsmarted it before too long. Mice 1, Warwick 0.&lt;/p&gt;
&lt;video width=&#34;400&#34; height=&#34;300&#34; controls loading=&#34;lazy&#34;&gt;
   &lt;source src=&#34;https://iamwoz.com/blog/20210613_mouse/cable_barrier_wins.mp4&#34; type=&#34;video/mp4&#34; /&gt;
   Sorry, your browser doesn&#39;t support embedded videos.
&lt;/video&gt;
&lt;video width=&#34;400&#34; height=&#34;300&#34; controls loading=&#34;lazy&#34;&gt;
   &lt;source src=&#34;https://iamwoz.com/blog/20210613_mouse/defeat_cable_barrier.mp4&#34; type=&#34;video/mp4&#34; /&gt;
   Sorry, your browser doesn&#39;t support embedded videos.
&lt;/video&gt;
&lt;p&gt;I made a bigger guard. Hopefully they can&amp;rsquo;t climb around this one. The photo of
the guard above is actually the bigger one I made.&lt;/p&gt;
&lt;h1 id=&#34;day-3---theyre-_still_-on-the-kitchen-bench-but-i-caught-one&#34;&gt;Day 3 - they&amp;rsquo;re &lt;em&gt;still&lt;/em&gt; on the kitchen bench, but I caught one!&lt;/h1&gt;
&lt;p&gt;There was no sign of the mice on the network cable this time. However, they&amp;rsquo;re
still on the kitchen bench. How are they getting there? Time to move the camera.&lt;/p&gt;
&lt;p&gt;In the meantime, I&amp;rsquo;ve had traps set up around the crime scene:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://iamwoz.com/blog/20210613_mouse/trap.jpg&#34;
alt=&#34;mouse trap&#34;
width=&#34;517&#34;
loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://iamwoz.com/blog/20210613_mouse/trap_inside.jpg&#34;
alt=&#34;inside the mouse trap&#34;
width=&#34;384&#34;
loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The food/bait sits deep inside, and when the mouse goes in to get it, the lid
falls shut:&lt;/p&gt;
&lt;video width=&#34;600&#34; height=&#34;300&#34; controls loading=&#34;lazy&#34;&gt;
   &lt;source src=&#34;https://iamwoz.com/blog/20210613_mouse/trap.mp4&#34; type=&#34;video/mp4&#34; /&gt;
   Sorry, your browser doesn&#39;t support embedded videos.
&lt;/video&gt;
&lt;p&gt;Genius!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://iamwoz.com/blog/20210613_mouse/mouse_with_cheese.jpg&#34;
alt=&#34;mouse with a piece of cheese&#34;
width=&#34;417&#34;
loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;video width=&#34;400&#34; height=&#34;300&#34; controls loading=&#34;lazy&#34;&gt;
   &lt;source src=&#34;https://iamwoz.com/blog/20210613_mouse/mouse_eat_cheese.mp4&#34; type=&#34;video/mp4&#34; /&gt;
   Sorry, your browser doesn&#39;t support embedded videos.
&lt;/video&gt;
&lt;p&gt;D&amp;rsquo;aww he eats cheese just like I do. Off to the park!&lt;/p&gt;
&lt;h1 id=&#34;day-4---a-new-route-to-the-kitchen-bench-is-discovered&#34;&gt;Day 4 - a new route to the kitchen bench is discovered&lt;/h1&gt;
&lt;p&gt;I often saw the mice loitering around the dishwasher, so I set the camera up a
bit closer to see what was going on there.&lt;/p&gt;
&lt;video width=&#34;400&#34; height=&#34;300&#34; controls loading=&#34;lazy&#34;&gt;
   &lt;source src=&#34;https://iamwoz.com/blog/20210613_mouse/climb_wood_panel.mp4&#34; type=&#34;video/mp4&#34; /&gt;
   Sorry, your browser doesn&#39;t support embedded videos.
&lt;/video&gt;
&lt;p&gt;Aha! You sneaky, clever mouse! I stood staring at this wooden panel between the
fridge and dishwasher for an unreasonably long time. Eventually, I devised a
sophisticated barrier:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://iamwoz.com/blog/20210613_mouse/wood_panel_barrier.jpg&#34;
alt=&#34;cardboard taped to wooden panel&#34;
width=&#34;335&#34;
loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Cardboard again, sticky-taped to the panel. The idea was that it&amp;rsquo;d be too fiddly
for the mice to hold on to on their way up&amp;hellip;&lt;/p&gt;
&lt;video width=&#34;300&#34; height=&#34;300&#34; controls loading=&#34;lazy&#34;&gt;
   &lt;source src=&#34;https://iamwoz.com/blog/20210613_mouse/wood_barrier.mp4&#34; type=&#34;video/mp4&#34; /&gt;
   Sorry, your browser doesn&#39;t support embedded videos.
&lt;/video&gt;
&lt;p&gt;It worked! Mice 1, Warwick 1.&lt;/p&gt;
&lt;h1 id=&#34;the-following-week&#34;&gt;The following week&lt;/h1&gt;
&lt;p&gt;The following few nights, I didn&amp;rsquo;t catch any mice on the kitchen bench, but
they&amp;rsquo;ve still been foraging around on the floor. I&amp;rsquo;ve caught two more since, but
the &amp;rsquo;last&amp;rsquo; one seems to have caught on that its friends don&amp;rsquo;t come back from the
traps. It&amp;rsquo;s been visiting less and less, and I haven&amp;rsquo;t seen it in the last
couple of days. The battle is over, for now&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How this site is built</title>
      <link>https://iamwoz.com/blog/20210424_how_this_site_is_built/</link>
      <pubDate>Sat, 24 Apr 2021 14:48:00 +1100</pubDate>
      
      <guid>https://iamwoz.com/blog/20210424_how_this_site_is_built/</guid>
      <description>&lt;p&gt;I currently use &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; to generate the site content from
markdown. The content is hosted by &lt;a href=&#34;https://www.netlify.com&#34;&gt;Netlify&lt;/a&gt;. The
source for this site is on &lt;a href=&#34;https://github.com/uozuAho/blog&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;generating-site-content&#34;&gt;Generating site content&lt;/h1&gt;
&lt;p&gt;I want a simple tool that allows full control over the content I publish, and
isn&amp;rsquo;t too difficult to maintain. Below are some more specifics, and how
&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; provides.&lt;/p&gt;
&lt;h2 id=&#34;must-have&#34;&gt;Must have&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;easy to write (markdown)&lt;/li&gt;
&lt;li&gt;server generated syntax highlighting. See below for details.&lt;/li&gt;
&lt;li&gt;minimal (no) JavaScript. Small HTML + CSS.
&lt;ul&gt;
&lt;li&gt;this depends on the &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;Hugo theme&lt;/a&gt; you use - there
are tiny themes out there, like &lt;a href=&#34;https://github.com/yihui/hugo-xmin&#34;&gt;xmin&lt;/a&gt;.
I copied this into my repo to make my own tweaks.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;no invasive trackers like google analytics&lt;/li&gt;
&lt;li&gt;doesn&amp;rsquo;t look like a Wix/Squarespace site :)
&lt;ul&gt;
&lt;li&gt;published content is fully customisable with &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;Hugo themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;An easy-to-navigate &amp;lsquo;current&amp;rsquo; and &amp;lsquo;archives&amp;rsquo; view
&lt;ul&gt;
&lt;li&gt;again, this depends on the theme. My &lt;a href=&#34;..&#34;&gt;blog base page&lt;/a&gt; is simply a list
of all my posts. That works for now!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;URLs that don&amp;rsquo;t need to change
&lt;ul&gt;
&lt;li&gt;posts follow directory structure. I timestamp my posts, so the URLs
shouldn&amp;rsquo;t ever need to change.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RSS, or however news readers work
&lt;ul&gt;
&lt;li&gt;Hugo automatically generates an RSS index.xml by default&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/templates/rss/&#34;&gt;Hugo docs: RSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;this actually took some work to get right, see details below&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;easy to read on a phone, tablet and PC&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nice-to-have&#34;&gt;Nice to have&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;dark theme
&lt;ul&gt;
&lt;li&gt;I use &lt;a href=&#34;https://darkreader.org&#34;&gt;dark reader&lt;/a&gt; and &lt;a href=&#34;https://feedly.com&#34;&gt;Feedly&lt;/a&gt;
to read most sites, so pretty colours &amp;amp; formatting don&amp;rsquo;t bother me that much
&lt;ul&gt;
&lt;li&gt;Update 2021-05-05: I just learned about the
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme&#34;&gt;prefers-color-scheme&lt;/a&gt;
css media query. This site is now dark if your OS/browser is set to dark!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;embedded search feature
&lt;ul&gt;
&lt;li&gt;don&amp;rsquo;t need it for now. Looks easy enough:
&lt;a href=&#34;https://gohugo.io/tools/search/&#34;&gt;embedded search options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;some-more-details&#34;&gt;Some more details&lt;/h2&gt;
&lt;h3 id=&#34;syntax-highlighting&#34;&gt;Syntax highlighting&lt;/h3&gt;
&lt;p&gt;Syntax highlighting works out of the box with Hugo, and is done at build time,
resulting in smaller page sizes than bundling a JavaScript syntax highlighter
like &lt;a href=&#34;https://highlightjs.org/&#34;&gt;highlight.js&lt;/a&gt;. For example, writing the
following markdown results in the syntax snippet below:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;```js
const main = () =&amp;gt; { console.log(&amp;#34;Hello world!&amp;#34;); }
```
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; () =&amp;gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello world!&amp;#34;&lt;/span&gt;); }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;rss&#34;&gt;RSS&lt;/h3&gt;
&lt;p&gt;This took more effort than I expected. By default, Hugo generates an RSS feed
for your home page, and each &amp;lsquo;section&amp;rsquo; of your site, such as ~/blog, ~/about.
I couldn&amp;rsquo;t figure out how to disable this, so I ended up deleting these files
after generation in my &amp;lsquo;publish&amp;rsquo; script. See
&lt;a href=&#34;https://github.com/uozuAho/blog&#34;&gt;this site&amp;rsquo;s source&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;Also, Hugo&amp;rsquo;s default RSS template only shows a summary of each article in the
feed, which I find annoying when reading articles via my RSS aggregator. See
&lt;a href=&#34;https://gretchenlouise.com/wordpress-rss-feeds-summary-full-custom&#34;&gt;RSS: Summary or full text?&lt;/a&gt;
for more information about choosing between a summary or full text in your RSS
feed.&lt;/p&gt;
&lt;h3 id=&#34;would-it-be-easier-to-just-write-the-html--css-myself&#34;&gt;Would it be easier to just write the HTML &amp;amp; CSS myself?&lt;/h3&gt;
&lt;p&gt;Probably not. Markdown is easier to read &amp;amp; edit, and Hugo generates HTML that I
don&amp;rsquo;t need to tweak afterwards.&lt;/p&gt;
&lt;h2 id=&#34;other-static-site-generators-considered&#34;&gt;Other static site generators considered&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gatsbyjs.com/&#34;&gt;Gatsby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both of these are based on React, which put me off for a simple blog that could
be hand-written in HTML. I also assumed Hugo would be faster, being written in
go.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve also briefly used &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; with
&lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;. It was a bit slow, and getting it
working on GitHub took more effort than I had patience for. Also being a Windows
user, the Ruby usage put me off.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;hosting&#34;&gt;Hosting&lt;/h1&gt;
&lt;p&gt;I chose &lt;a href=&#34;https://docs.netlify.com/&#34;&gt;Netlify&lt;/a&gt; due to its easy management of
everything I could think of, and more. I could learn a lot by building my own
infrastructure on AWS or another cloud provider, but that&amp;rsquo;s not the intention of
this site.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what I want from hosting, and how &lt;a href=&#34;https://docs.netlify.com/&#34;&gt;Netlify&lt;/a&gt;
provides.&lt;/p&gt;
&lt;h2 id=&#34;must-have-1&#34;&gt;Must have&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;custom domain with automatic renewal&lt;/li&gt;
&lt;li&gt;HTTPS with automatic certificate renewal&lt;/li&gt;
&lt;li&gt;easy deployment process
&lt;ul&gt;
&lt;li&gt;push to main, that&amp;rsquo;s it :)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;no invasive trackers like google analytics&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nice-to-have-1&#34;&gt;Nice to have&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;view/review before deployment
&lt;ul&gt;
&lt;li&gt;Netlify has a feature that allows deploying branches to subdomains. See
&lt;a href=&#34;https://docs.netlify.com/domains-https/custom-domains/multiple-domains/#branch-subdomains&#34;&gt;branch subdomains&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some extra things that Netlify provides, that I hadn&amp;rsquo;t thought about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;atomic deployments (no errors for users trying to view the page while content
is being changed/uploaded)&lt;/li&gt;
&lt;li&gt;managed CDN&lt;/li&gt;
&lt;li&gt;domain registrations use Netlify as the WHOIS contact, keeping my personal
contact details private from spammers. See
&lt;a href=&#34;https://docs.netlify.com/domains-https/netlify-dns/domain-registration/&#34;&gt;domain registration&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pushing updates to this site is as simple as pushing to my
&lt;a href=&#34;https://github.com/uozuAho/blog&#34;&gt;GitHub repo&lt;/a&gt;. Netlify watches my repo for
updates and deploys them.&lt;/p&gt;
&lt;p&gt;I configured my Netlify site to not do any build step. I simply build my site
content locally with Hugo, include the published content in my git repo, and
push to GitHub to publish new content. This removes complication from the
publishing process. One complication I ran into was git submodules, which Hugo
uses for themes. Netlify couldn&amp;rsquo;t clone my theme submodule. Instead of trying to
figure that out, I just included my theme as regular files in my repo.&lt;/p&gt;
&lt;h1 id=&#34;other-hosting-options-considered&#34;&gt;Other hosting options considered&lt;/h1&gt;
&lt;h2 id=&#34;hugo-aware&#34;&gt;Hugo-aware&lt;/h2&gt;
&lt;p&gt;All of these have HTTPS, deploy on push, and custom domain options. The drawback
is that you rely on their support of Hugo. For a simple blog, pushing the
rendered HTML + CSS from my dev machine seems good enough.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-aws-amplify/&#34;&gt;AWS amplify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-render/&#34;&gt;Render&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;deploy via GitHub, fully managed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-netlify/&#34;&gt;Netlify&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;deploy via GitHub, fully managed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;others&#34;&gt;Others&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-deploy-a-static-website-to-the-cloud-with-digitalocean-app-platform&#34;&gt;DigitalOcean app platform&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;pro
&lt;ul&gt;
&lt;li&gt;auto CDN, HTTPS&lt;/li&gt;
&lt;li&gt;deploy static content from GitHub&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;con
&lt;ul&gt;
&lt;li&gt;manual configuration for custom domains&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/userguide/WebsiteHosting.html&#34;&gt;AWS S3&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;lots of manual steps for HTTPS, CDN, DNS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nearlyfreespeech.net/&#34;&gt;https://www.nearlyfreespeech.net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.cloudflare.com/pages/getting-started&#34;&gt;https://developers.cloudflare.com/pages/getting-started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/getting-started/hands-on/host-static-website/&#34;&gt;AWS amplify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;references-and-further-reading&#34;&gt;References and further reading&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://timhilliard.com/blog/static-home-page-in-hugo&#34;&gt;Creating a static home page in Hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blr.design/blog/cdn-for-fast-static-website&#34;&gt;Do I need a CDN?&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;faster load times around the world&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.feedly.com/10-ways-to-optimize-your-feed-for-feedly&#34;&gt;Feedly: optimise your RSS feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gretchenlouise.com/wordpress-rss-feeds-summary-full-custom&#34;&gt;RSS: Summary or full text?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
